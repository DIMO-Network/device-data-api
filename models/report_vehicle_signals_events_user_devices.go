// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ReportVehicleSignalsEventsUserDevice is an object representing the database table.
type ReportVehicleSignalsEventsUserDevice struct {
	DateID         string    `boil:"date_id" json:"date_id" toml:"date_id" yaml:"date_id"`
	IntegrationID  string    `boil:"integration_id" json:"integration_id" toml:"integration_id" yaml:"integration_id"`
	PowerTrainType string    `boil:"power_train_type" json:"power_train_type" toml:"power_train_type" yaml:"power_train_type"`
	Count          int       `boil:"count" json:"count" toml:"count" yaml:"count"`
	CreatedAt      time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *reportVehicleSignalsEventsUserDeviceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L reportVehicleSignalsEventsUserDeviceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ReportVehicleSignalsEventsUserDeviceColumns = struct {
	DateID         string
	IntegrationID  string
	PowerTrainType string
	Count          string
	CreatedAt      string
}{
	DateID:         "date_id",
	IntegrationID:  "integration_id",
	PowerTrainType: "power_train_type",
	Count:          "count",
	CreatedAt:      "created_at",
}

var ReportVehicleSignalsEventsUserDeviceTableColumns = struct {
	DateID         string
	IntegrationID  string
	PowerTrainType string
	Count          string
	CreatedAt      string
}{
	DateID:         "report_vehicle_signals_events_user_devices.date_id",
	IntegrationID:  "report_vehicle_signals_events_user_devices.integration_id",
	PowerTrainType: "report_vehicle_signals_events_user_devices.power_train_type",
	Count:          "report_vehicle_signals_events_user_devices.count",
	CreatedAt:      "report_vehicle_signals_events_user_devices.created_at",
}

// Generated where

var ReportVehicleSignalsEventsUserDeviceWhere = struct {
	DateID         whereHelperstring
	IntegrationID  whereHelperstring
	PowerTrainType whereHelperstring
	Count          whereHelperint
	CreatedAt      whereHelpertime_Time
}{
	DateID:         whereHelperstring{field: "\"device_data_api\".\"report_vehicle_signals_events_user_devices\".\"date_id\""},
	IntegrationID:  whereHelperstring{field: "\"device_data_api\".\"report_vehicle_signals_events_user_devices\".\"integration_id\""},
	PowerTrainType: whereHelperstring{field: "\"device_data_api\".\"report_vehicle_signals_events_user_devices\".\"power_train_type\""},
	Count:          whereHelperint{field: "\"device_data_api\".\"report_vehicle_signals_events_user_devices\".\"count\""},
	CreatedAt:      whereHelpertime_Time{field: "\"device_data_api\".\"report_vehicle_signals_events_user_devices\".\"created_at\""},
}

// ReportVehicleSignalsEventsUserDeviceRels is where relationship names are stored.
var ReportVehicleSignalsEventsUserDeviceRels = struct {
}{}

// reportVehicleSignalsEventsUserDeviceR is where relationships are stored.
type reportVehicleSignalsEventsUserDeviceR struct {
}

// NewStruct creates a new relationship struct
func (*reportVehicleSignalsEventsUserDeviceR) NewStruct() *reportVehicleSignalsEventsUserDeviceR {
	return &reportVehicleSignalsEventsUserDeviceR{}
}

// reportVehicleSignalsEventsUserDeviceL is where Load methods for each relationship are stored.
type reportVehicleSignalsEventsUserDeviceL struct{}

var (
	reportVehicleSignalsEventsUserDeviceAllColumns            = []string{"date_id", "integration_id", "power_train_type", "count", "created_at"}
	reportVehicleSignalsEventsUserDeviceColumnsWithoutDefault = []string{"date_id", "integration_id", "power_train_type", "count"}
	reportVehicleSignalsEventsUserDeviceColumnsWithDefault    = []string{"created_at"}
	reportVehicleSignalsEventsUserDevicePrimaryKeyColumns     = []string{"date_id", "integration_id", "power_train_type"}
	reportVehicleSignalsEventsUserDeviceGeneratedColumns      = []string{}
)

type (
	// ReportVehicleSignalsEventsUserDeviceSlice is an alias for a slice of pointers to ReportVehicleSignalsEventsUserDevice.
	// This should almost always be used instead of []ReportVehicleSignalsEventsUserDevice.
	ReportVehicleSignalsEventsUserDeviceSlice []*ReportVehicleSignalsEventsUserDevice
	// ReportVehicleSignalsEventsUserDeviceHook is the signature for custom ReportVehicleSignalsEventsUserDevice hook methods
	ReportVehicleSignalsEventsUserDeviceHook func(context.Context, boil.ContextExecutor, *ReportVehicleSignalsEventsUserDevice) error

	reportVehicleSignalsEventsUserDeviceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	reportVehicleSignalsEventsUserDeviceType                 = reflect.TypeOf(&ReportVehicleSignalsEventsUserDevice{})
	reportVehicleSignalsEventsUserDeviceMapping              = queries.MakeStructMapping(reportVehicleSignalsEventsUserDeviceType)
	reportVehicleSignalsEventsUserDevicePrimaryKeyMapping, _ = queries.BindMapping(reportVehicleSignalsEventsUserDeviceType, reportVehicleSignalsEventsUserDeviceMapping, reportVehicleSignalsEventsUserDevicePrimaryKeyColumns)
	reportVehicleSignalsEventsUserDeviceInsertCacheMut       sync.RWMutex
	reportVehicleSignalsEventsUserDeviceInsertCache          = make(map[string]insertCache)
	reportVehicleSignalsEventsUserDeviceUpdateCacheMut       sync.RWMutex
	reportVehicleSignalsEventsUserDeviceUpdateCache          = make(map[string]updateCache)
	reportVehicleSignalsEventsUserDeviceUpsertCacheMut       sync.RWMutex
	reportVehicleSignalsEventsUserDeviceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var reportVehicleSignalsEventsUserDeviceAfterSelectHooks []ReportVehicleSignalsEventsUserDeviceHook

var reportVehicleSignalsEventsUserDeviceBeforeInsertHooks []ReportVehicleSignalsEventsUserDeviceHook
var reportVehicleSignalsEventsUserDeviceAfterInsertHooks []ReportVehicleSignalsEventsUserDeviceHook

var reportVehicleSignalsEventsUserDeviceBeforeUpdateHooks []ReportVehicleSignalsEventsUserDeviceHook
var reportVehicleSignalsEventsUserDeviceAfterUpdateHooks []ReportVehicleSignalsEventsUserDeviceHook

var reportVehicleSignalsEventsUserDeviceBeforeDeleteHooks []ReportVehicleSignalsEventsUserDeviceHook
var reportVehicleSignalsEventsUserDeviceAfterDeleteHooks []ReportVehicleSignalsEventsUserDeviceHook

var reportVehicleSignalsEventsUserDeviceBeforeUpsertHooks []ReportVehicleSignalsEventsUserDeviceHook
var reportVehicleSignalsEventsUserDeviceAfterUpsertHooks []ReportVehicleSignalsEventsUserDeviceHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ReportVehicleSignalsEventsUserDevice) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reportVehicleSignalsEventsUserDeviceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ReportVehicleSignalsEventsUserDevice) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reportVehicleSignalsEventsUserDeviceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ReportVehicleSignalsEventsUserDevice) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reportVehicleSignalsEventsUserDeviceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ReportVehicleSignalsEventsUserDevice) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reportVehicleSignalsEventsUserDeviceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ReportVehicleSignalsEventsUserDevice) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reportVehicleSignalsEventsUserDeviceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ReportVehicleSignalsEventsUserDevice) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reportVehicleSignalsEventsUserDeviceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ReportVehicleSignalsEventsUserDevice) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reportVehicleSignalsEventsUserDeviceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ReportVehicleSignalsEventsUserDevice) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reportVehicleSignalsEventsUserDeviceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ReportVehicleSignalsEventsUserDevice) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reportVehicleSignalsEventsUserDeviceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddReportVehicleSignalsEventsUserDeviceHook registers your hook function for all future operations.
func AddReportVehicleSignalsEventsUserDeviceHook(hookPoint boil.HookPoint, reportVehicleSignalsEventsUserDeviceHook ReportVehicleSignalsEventsUserDeviceHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		reportVehicleSignalsEventsUserDeviceAfterSelectHooks = append(reportVehicleSignalsEventsUserDeviceAfterSelectHooks, reportVehicleSignalsEventsUserDeviceHook)
	case boil.BeforeInsertHook:
		reportVehicleSignalsEventsUserDeviceBeforeInsertHooks = append(reportVehicleSignalsEventsUserDeviceBeforeInsertHooks, reportVehicleSignalsEventsUserDeviceHook)
	case boil.AfterInsertHook:
		reportVehicleSignalsEventsUserDeviceAfterInsertHooks = append(reportVehicleSignalsEventsUserDeviceAfterInsertHooks, reportVehicleSignalsEventsUserDeviceHook)
	case boil.BeforeUpdateHook:
		reportVehicleSignalsEventsUserDeviceBeforeUpdateHooks = append(reportVehicleSignalsEventsUserDeviceBeforeUpdateHooks, reportVehicleSignalsEventsUserDeviceHook)
	case boil.AfterUpdateHook:
		reportVehicleSignalsEventsUserDeviceAfterUpdateHooks = append(reportVehicleSignalsEventsUserDeviceAfterUpdateHooks, reportVehicleSignalsEventsUserDeviceHook)
	case boil.BeforeDeleteHook:
		reportVehicleSignalsEventsUserDeviceBeforeDeleteHooks = append(reportVehicleSignalsEventsUserDeviceBeforeDeleteHooks, reportVehicleSignalsEventsUserDeviceHook)
	case boil.AfterDeleteHook:
		reportVehicleSignalsEventsUserDeviceAfterDeleteHooks = append(reportVehicleSignalsEventsUserDeviceAfterDeleteHooks, reportVehicleSignalsEventsUserDeviceHook)
	case boil.BeforeUpsertHook:
		reportVehicleSignalsEventsUserDeviceBeforeUpsertHooks = append(reportVehicleSignalsEventsUserDeviceBeforeUpsertHooks, reportVehicleSignalsEventsUserDeviceHook)
	case boil.AfterUpsertHook:
		reportVehicleSignalsEventsUserDeviceAfterUpsertHooks = append(reportVehicleSignalsEventsUserDeviceAfterUpsertHooks, reportVehicleSignalsEventsUserDeviceHook)
	}
}

// One returns a single reportVehicleSignalsEventsUserDevice record from the query.
func (q reportVehicleSignalsEventsUserDeviceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ReportVehicleSignalsEventsUserDevice, error) {
	o := &ReportVehicleSignalsEventsUserDevice{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for report_vehicle_signals_events_user_devices")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ReportVehicleSignalsEventsUserDevice records from the query.
func (q reportVehicleSignalsEventsUserDeviceQuery) All(ctx context.Context, exec boil.ContextExecutor) (ReportVehicleSignalsEventsUserDeviceSlice, error) {
	var o []*ReportVehicleSignalsEventsUserDevice

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ReportVehicleSignalsEventsUserDevice slice")
	}

	if len(reportVehicleSignalsEventsUserDeviceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ReportVehicleSignalsEventsUserDevice records in the query.
func (q reportVehicleSignalsEventsUserDeviceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count report_vehicle_signals_events_user_devices rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q reportVehicleSignalsEventsUserDeviceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if report_vehicle_signals_events_user_devices exists")
	}

	return count > 0, nil
}

// ReportVehicleSignalsEventsUserDevices retrieves all the records using an executor.
func ReportVehicleSignalsEventsUserDevices(mods ...qm.QueryMod) reportVehicleSignalsEventsUserDeviceQuery {
	mods = append(mods, qm.From("\"device_data_api\".\"report_vehicle_signals_events_user_devices\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"device_data_api\".\"report_vehicle_signals_events_user_devices\".*"})
	}

	return reportVehicleSignalsEventsUserDeviceQuery{q}
}

// FindReportVehicleSignalsEventsUserDevice retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindReportVehicleSignalsEventsUserDevice(ctx context.Context, exec boil.ContextExecutor, dateID string, integrationID string, powerTrainType string, selectCols ...string) (*ReportVehicleSignalsEventsUserDevice, error) {
	reportVehicleSignalsEventsUserDeviceObj := &ReportVehicleSignalsEventsUserDevice{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"device_data_api\".\"report_vehicle_signals_events_user_devices\" where \"date_id\"=$1 AND \"integration_id\"=$2 AND \"power_train_type\"=$3", sel,
	)

	q := queries.Raw(query, dateID, integrationID, powerTrainType)

	err := q.Bind(ctx, exec, reportVehicleSignalsEventsUserDeviceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from report_vehicle_signals_events_user_devices")
	}

	if err = reportVehicleSignalsEventsUserDeviceObj.doAfterSelectHooks(ctx, exec); err != nil {
		return reportVehicleSignalsEventsUserDeviceObj, err
	}

	return reportVehicleSignalsEventsUserDeviceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ReportVehicleSignalsEventsUserDevice) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no report_vehicle_signals_events_user_devices provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(reportVehicleSignalsEventsUserDeviceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	reportVehicleSignalsEventsUserDeviceInsertCacheMut.RLock()
	cache, cached := reportVehicleSignalsEventsUserDeviceInsertCache[key]
	reportVehicleSignalsEventsUserDeviceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			reportVehicleSignalsEventsUserDeviceAllColumns,
			reportVehicleSignalsEventsUserDeviceColumnsWithDefault,
			reportVehicleSignalsEventsUserDeviceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(reportVehicleSignalsEventsUserDeviceType, reportVehicleSignalsEventsUserDeviceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(reportVehicleSignalsEventsUserDeviceType, reportVehicleSignalsEventsUserDeviceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"device_data_api\".\"report_vehicle_signals_events_user_devices\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"device_data_api\".\"report_vehicle_signals_events_user_devices\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into report_vehicle_signals_events_user_devices")
	}

	if !cached {
		reportVehicleSignalsEventsUserDeviceInsertCacheMut.Lock()
		reportVehicleSignalsEventsUserDeviceInsertCache[key] = cache
		reportVehicleSignalsEventsUserDeviceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ReportVehicleSignalsEventsUserDevice.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ReportVehicleSignalsEventsUserDevice) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	reportVehicleSignalsEventsUserDeviceUpdateCacheMut.RLock()
	cache, cached := reportVehicleSignalsEventsUserDeviceUpdateCache[key]
	reportVehicleSignalsEventsUserDeviceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			reportVehicleSignalsEventsUserDeviceAllColumns,
			reportVehicleSignalsEventsUserDevicePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update report_vehicle_signals_events_user_devices, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"device_data_api\".\"report_vehicle_signals_events_user_devices\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, reportVehicleSignalsEventsUserDevicePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(reportVehicleSignalsEventsUserDeviceType, reportVehicleSignalsEventsUserDeviceMapping, append(wl, reportVehicleSignalsEventsUserDevicePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update report_vehicle_signals_events_user_devices row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for report_vehicle_signals_events_user_devices")
	}

	if !cached {
		reportVehicleSignalsEventsUserDeviceUpdateCacheMut.Lock()
		reportVehicleSignalsEventsUserDeviceUpdateCache[key] = cache
		reportVehicleSignalsEventsUserDeviceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q reportVehicleSignalsEventsUserDeviceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for report_vehicle_signals_events_user_devices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for report_vehicle_signals_events_user_devices")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ReportVehicleSignalsEventsUserDeviceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reportVehicleSignalsEventsUserDevicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"device_data_api\".\"report_vehicle_signals_events_user_devices\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, reportVehicleSignalsEventsUserDevicePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in reportVehicleSignalsEventsUserDevice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all reportVehicleSignalsEventsUserDevice")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ReportVehicleSignalsEventsUserDevice) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no report_vehicle_signals_events_user_devices provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(reportVehicleSignalsEventsUserDeviceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	reportVehicleSignalsEventsUserDeviceUpsertCacheMut.RLock()
	cache, cached := reportVehicleSignalsEventsUserDeviceUpsertCache[key]
	reportVehicleSignalsEventsUserDeviceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			reportVehicleSignalsEventsUserDeviceAllColumns,
			reportVehicleSignalsEventsUserDeviceColumnsWithDefault,
			reportVehicleSignalsEventsUserDeviceColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			reportVehicleSignalsEventsUserDeviceAllColumns,
			reportVehicleSignalsEventsUserDevicePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert report_vehicle_signals_events_user_devices, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(reportVehicleSignalsEventsUserDevicePrimaryKeyColumns))
			copy(conflict, reportVehicleSignalsEventsUserDevicePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"device_data_api\".\"report_vehicle_signals_events_user_devices\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(reportVehicleSignalsEventsUserDeviceType, reportVehicleSignalsEventsUserDeviceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(reportVehicleSignalsEventsUserDeviceType, reportVehicleSignalsEventsUserDeviceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert report_vehicle_signals_events_user_devices")
	}

	if !cached {
		reportVehicleSignalsEventsUserDeviceUpsertCacheMut.Lock()
		reportVehicleSignalsEventsUserDeviceUpsertCache[key] = cache
		reportVehicleSignalsEventsUserDeviceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ReportVehicleSignalsEventsUserDevice record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ReportVehicleSignalsEventsUserDevice) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ReportVehicleSignalsEventsUserDevice provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), reportVehicleSignalsEventsUserDevicePrimaryKeyMapping)
	sql := "DELETE FROM \"device_data_api\".\"report_vehicle_signals_events_user_devices\" WHERE \"date_id\"=$1 AND \"integration_id\"=$2 AND \"power_train_type\"=$3"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from report_vehicle_signals_events_user_devices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for report_vehicle_signals_events_user_devices")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q reportVehicleSignalsEventsUserDeviceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no reportVehicleSignalsEventsUserDeviceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from report_vehicle_signals_events_user_devices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for report_vehicle_signals_events_user_devices")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ReportVehicleSignalsEventsUserDeviceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(reportVehicleSignalsEventsUserDeviceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reportVehicleSignalsEventsUserDevicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"device_data_api\".\"report_vehicle_signals_events_user_devices\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, reportVehicleSignalsEventsUserDevicePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from reportVehicleSignalsEventsUserDevice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for report_vehicle_signals_events_user_devices")
	}

	if len(reportVehicleSignalsEventsUserDeviceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ReportVehicleSignalsEventsUserDevice) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindReportVehicleSignalsEventsUserDevice(ctx, exec, o.DateID, o.IntegrationID, o.PowerTrainType)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ReportVehicleSignalsEventsUserDeviceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ReportVehicleSignalsEventsUserDeviceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reportVehicleSignalsEventsUserDevicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"device_data_api\".\"report_vehicle_signals_events_user_devices\".* FROM \"device_data_api\".\"report_vehicle_signals_events_user_devices\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, reportVehicleSignalsEventsUserDevicePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ReportVehicleSignalsEventsUserDeviceSlice")
	}

	*o = slice

	return nil
}

// ReportVehicleSignalsEventsUserDeviceExists checks if the ReportVehicleSignalsEventsUserDevice row exists.
func ReportVehicleSignalsEventsUserDeviceExists(ctx context.Context, exec boil.ContextExecutor, dateID string, integrationID string, powerTrainType string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"device_data_api\".\"report_vehicle_signals_events_user_devices\" where \"date_id\"=$1 AND \"integration_id\"=$2 AND \"power_train_type\"=$3 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, dateID, integrationID, powerTrainType)
	}
	row := exec.QueryRowContext(ctx, sql, dateID, integrationID, powerTrainType)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if report_vehicle_signals_events_user_devices exists")
	}

	return exists, nil
}
