// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ReportVehicleSignalsEventsAll is an object representing the database table.
type ReportVehicleSignalsEventsAll struct {
	DateID             string    `boil:"date_id" json:"date_id" toml:"date_id" yaml:"date_id"`
	IntegrationID      string    `boil:"integration_id" json:"integration_id" toml:"integration_id" yaml:"integration_id"`
	DeviceMakeID       string    `boil:"device_make_id" json:"device_make_id" toml:"device_make_id" yaml:"device_make_id"`
	PropertyID         string    `boil:"property_id" json:"property_id" toml:"property_id" yaml:"property_id"`
	Model              string    `boil:"model" json:"model" toml:"model" yaml:"model"`
	Year               int       `boil:"year" json:"year" toml:"year" yaml:"year"`
	DeviceDefinitionID string    `boil:"device_definition_id" json:"device_definition_id" toml:"device_definition_id" yaml:"device_definition_id"`
	DeviceMake         string    `boil:"device_make" json:"device_make" toml:"device_make" yaml:"device_make"`
	Count              int       `boil:"count" json:"count" toml:"count" yaml:"count"`
	CreatedAt          time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *reportVehicleSignalsEventsAllR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L reportVehicleSignalsEventsAllL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ReportVehicleSignalsEventsAllColumns = struct {
	DateID             string
	IntegrationID      string
	DeviceMakeID       string
	PropertyID         string
	Model              string
	Year               string
	DeviceDefinitionID string
	DeviceMake         string
	Count              string
	CreatedAt          string
}{
	DateID:             "date_id",
	IntegrationID:      "integration_id",
	DeviceMakeID:       "device_make_id",
	PropertyID:         "property_id",
	Model:              "model",
	Year:               "year",
	DeviceDefinitionID: "device_definition_id",
	DeviceMake:         "device_make",
	Count:              "count",
	CreatedAt:          "created_at",
}

var ReportVehicleSignalsEventsAllTableColumns = struct {
	DateID             string
	IntegrationID      string
	DeviceMakeID       string
	PropertyID         string
	Model              string
	Year               string
	DeviceDefinitionID string
	DeviceMake         string
	Count              string
	CreatedAt          string
}{
	DateID:             "report_vehicle_signals_events_all.date_id",
	IntegrationID:      "report_vehicle_signals_events_all.integration_id",
	DeviceMakeID:       "report_vehicle_signals_events_all.device_make_id",
	PropertyID:         "report_vehicle_signals_events_all.property_id",
	Model:              "report_vehicle_signals_events_all.model",
	Year:               "report_vehicle_signals_events_all.year",
	DeviceDefinitionID: "report_vehicle_signals_events_all.device_definition_id",
	DeviceMake:         "report_vehicle_signals_events_all.device_make",
	Count:              "report_vehicle_signals_events_all.count",
	CreatedAt:          "report_vehicle_signals_events_all.created_at",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var ReportVehicleSignalsEventsAllWhere = struct {
	DateID             whereHelperstring
	IntegrationID      whereHelperstring
	DeviceMakeID       whereHelperstring
	PropertyID         whereHelperstring
	Model              whereHelperstring
	Year               whereHelperint
	DeviceDefinitionID whereHelperstring
	DeviceMake         whereHelperstring
	Count              whereHelperint
	CreatedAt          whereHelpertime_Time
}{
	DateID:             whereHelperstring{field: "\"device_data_api\".\"report_vehicle_signals_events_all\".\"date_id\""},
	IntegrationID:      whereHelperstring{field: "\"device_data_api\".\"report_vehicle_signals_events_all\".\"integration_id\""},
	DeviceMakeID:       whereHelperstring{field: "\"device_data_api\".\"report_vehicle_signals_events_all\".\"device_make_id\""},
	PropertyID:         whereHelperstring{field: "\"device_data_api\".\"report_vehicle_signals_events_all\".\"property_id\""},
	Model:              whereHelperstring{field: "\"device_data_api\".\"report_vehicle_signals_events_all\".\"model\""},
	Year:               whereHelperint{field: "\"device_data_api\".\"report_vehicle_signals_events_all\".\"year\""},
	DeviceDefinitionID: whereHelperstring{field: "\"device_data_api\".\"report_vehicle_signals_events_all\".\"device_definition_id\""},
	DeviceMake:         whereHelperstring{field: "\"device_data_api\".\"report_vehicle_signals_events_all\".\"device_make\""},
	Count:              whereHelperint{field: "\"device_data_api\".\"report_vehicle_signals_events_all\".\"count\""},
	CreatedAt:          whereHelpertime_Time{field: "\"device_data_api\".\"report_vehicle_signals_events_all\".\"created_at\""},
}

// ReportVehicleSignalsEventsAllRels is where relationship names are stored.
var ReportVehicleSignalsEventsAllRels = struct {
}{}

// reportVehicleSignalsEventsAllR is where relationships are stored.
type reportVehicleSignalsEventsAllR struct {
}

// NewStruct creates a new relationship struct
func (*reportVehicleSignalsEventsAllR) NewStruct() *reportVehicleSignalsEventsAllR {
	return &reportVehicleSignalsEventsAllR{}
}

// reportVehicleSignalsEventsAllL is where Load methods for each relationship are stored.
type reportVehicleSignalsEventsAllL struct{}

var (
	reportVehicleSignalsEventsAllAllColumns            = []string{"date_id", "integration_id", "device_make_id", "property_id", "model", "year", "device_definition_id", "device_make", "count", "created_at"}
	reportVehicleSignalsEventsAllColumnsWithoutDefault = []string{"date_id", "integration_id", "device_make_id", "property_id", "model", "year", "device_definition_id", "device_make", "count"}
	reportVehicleSignalsEventsAllColumnsWithDefault    = []string{"created_at"}
	reportVehicleSignalsEventsAllPrimaryKeyColumns     = []string{"date_id", "integration_id", "device_make_id", "property_id", "model", "year"}
	reportVehicleSignalsEventsAllGeneratedColumns      = []string{}
)

type (
	// ReportVehicleSignalsEventsAllSlice is an alias for a slice of pointers to ReportVehicleSignalsEventsAll.
	// This should almost always be used instead of []ReportVehicleSignalsEventsAll.
	ReportVehicleSignalsEventsAllSlice []*ReportVehicleSignalsEventsAll
	// ReportVehicleSignalsEventsAllHook is the signature for custom ReportVehicleSignalsEventsAll hook methods
	ReportVehicleSignalsEventsAllHook func(context.Context, boil.ContextExecutor, *ReportVehicleSignalsEventsAll) error

	reportVehicleSignalsEventsAllQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	reportVehicleSignalsEventsAllType                 = reflect.TypeOf(&ReportVehicleSignalsEventsAll{})
	reportVehicleSignalsEventsAllMapping              = queries.MakeStructMapping(reportVehicleSignalsEventsAllType)
	reportVehicleSignalsEventsAllPrimaryKeyMapping, _ = queries.BindMapping(reportVehicleSignalsEventsAllType, reportVehicleSignalsEventsAllMapping, reportVehicleSignalsEventsAllPrimaryKeyColumns)
	reportVehicleSignalsEventsAllInsertCacheMut       sync.RWMutex
	reportVehicleSignalsEventsAllInsertCache          = make(map[string]insertCache)
	reportVehicleSignalsEventsAllUpdateCacheMut       sync.RWMutex
	reportVehicleSignalsEventsAllUpdateCache          = make(map[string]updateCache)
	reportVehicleSignalsEventsAllUpsertCacheMut       sync.RWMutex
	reportVehicleSignalsEventsAllUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var reportVehicleSignalsEventsAllAfterSelectHooks []ReportVehicleSignalsEventsAllHook

var reportVehicleSignalsEventsAllBeforeInsertHooks []ReportVehicleSignalsEventsAllHook
var reportVehicleSignalsEventsAllAfterInsertHooks []ReportVehicleSignalsEventsAllHook

var reportVehicleSignalsEventsAllBeforeUpdateHooks []ReportVehicleSignalsEventsAllHook
var reportVehicleSignalsEventsAllAfterUpdateHooks []ReportVehicleSignalsEventsAllHook

var reportVehicleSignalsEventsAllBeforeDeleteHooks []ReportVehicleSignalsEventsAllHook
var reportVehicleSignalsEventsAllAfterDeleteHooks []ReportVehicleSignalsEventsAllHook

var reportVehicleSignalsEventsAllBeforeUpsertHooks []ReportVehicleSignalsEventsAllHook
var reportVehicleSignalsEventsAllAfterUpsertHooks []ReportVehicleSignalsEventsAllHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ReportVehicleSignalsEventsAll) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reportVehicleSignalsEventsAllAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ReportVehicleSignalsEventsAll) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reportVehicleSignalsEventsAllBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ReportVehicleSignalsEventsAll) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reportVehicleSignalsEventsAllAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ReportVehicleSignalsEventsAll) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reportVehicleSignalsEventsAllBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ReportVehicleSignalsEventsAll) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reportVehicleSignalsEventsAllAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ReportVehicleSignalsEventsAll) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reportVehicleSignalsEventsAllBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ReportVehicleSignalsEventsAll) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reportVehicleSignalsEventsAllAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ReportVehicleSignalsEventsAll) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reportVehicleSignalsEventsAllBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ReportVehicleSignalsEventsAll) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reportVehicleSignalsEventsAllAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddReportVehicleSignalsEventsAllHook registers your hook function for all future operations.
func AddReportVehicleSignalsEventsAllHook(hookPoint boil.HookPoint, reportVehicleSignalsEventsAllHook ReportVehicleSignalsEventsAllHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		reportVehicleSignalsEventsAllAfterSelectHooks = append(reportVehicleSignalsEventsAllAfterSelectHooks, reportVehicleSignalsEventsAllHook)
	case boil.BeforeInsertHook:
		reportVehicleSignalsEventsAllBeforeInsertHooks = append(reportVehicleSignalsEventsAllBeforeInsertHooks, reportVehicleSignalsEventsAllHook)
	case boil.AfterInsertHook:
		reportVehicleSignalsEventsAllAfterInsertHooks = append(reportVehicleSignalsEventsAllAfterInsertHooks, reportVehicleSignalsEventsAllHook)
	case boil.BeforeUpdateHook:
		reportVehicleSignalsEventsAllBeforeUpdateHooks = append(reportVehicleSignalsEventsAllBeforeUpdateHooks, reportVehicleSignalsEventsAllHook)
	case boil.AfterUpdateHook:
		reportVehicleSignalsEventsAllAfterUpdateHooks = append(reportVehicleSignalsEventsAllAfterUpdateHooks, reportVehicleSignalsEventsAllHook)
	case boil.BeforeDeleteHook:
		reportVehicleSignalsEventsAllBeforeDeleteHooks = append(reportVehicleSignalsEventsAllBeforeDeleteHooks, reportVehicleSignalsEventsAllHook)
	case boil.AfterDeleteHook:
		reportVehicleSignalsEventsAllAfterDeleteHooks = append(reportVehicleSignalsEventsAllAfterDeleteHooks, reportVehicleSignalsEventsAllHook)
	case boil.BeforeUpsertHook:
		reportVehicleSignalsEventsAllBeforeUpsertHooks = append(reportVehicleSignalsEventsAllBeforeUpsertHooks, reportVehicleSignalsEventsAllHook)
	case boil.AfterUpsertHook:
		reportVehicleSignalsEventsAllAfterUpsertHooks = append(reportVehicleSignalsEventsAllAfterUpsertHooks, reportVehicleSignalsEventsAllHook)
	}
}

// One returns a single reportVehicleSignalsEventsAll record from the query.
func (q reportVehicleSignalsEventsAllQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ReportVehicleSignalsEventsAll, error) {
	o := &ReportVehicleSignalsEventsAll{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for report_vehicle_signals_events_all")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ReportVehicleSignalsEventsAll records from the query.
func (q reportVehicleSignalsEventsAllQuery) All(ctx context.Context, exec boil.ContextExecutor) (ReportVehicleSignalsEventsAllSlice, error) {
	var o []*ReportVehicleSignalsEventsAll

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ReportVehicleSignalsEventsAll slice")
	}

	if len(reportVehicleSignalsEventsAllAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ReportVehicleSignalsEventsAll records in the query.
func (q reportVehicleSignalsEventsAllQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count report_vehicle_signals_events_all rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q reportVehicleSignalsEventsAllQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if report_vehicle_signals_events_all exists")
	}

	return count > 0, nil
}

// ReportVehicleSignalsEventsAlls retrieves all the records using an executor.
func ReportVehicleSignalsEventsAlls(mods ...qm.QueryMod) reportVehicleSignalsEventsAllQuery {
	mods = append(mods, qm.From("\"device_data_api\".\"report_vehicle_signals_events_all\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"device_data_api\".\"report_vehicle_signals_events_all\".*"})
	}

	return reportVehicleSignalsEventsAllQuery{q}
}

// FindReportVehicleSignalsEventsAll retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindReportVehicleSignalsEventsAll(ctx context.Context, exec boil.ContextExecutor, dateID string, integrationID string, deviceMakeID string, propertyID string, model string, year int, selectCols ...string) (*ReportVehicleSignalsEventsAll, error) {
	reportVehicleSignalsEventsAllObj := &ReportVehicleSignalsEventsAll{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"device_data_api\".\"report_vehicle_signals_events_all\" where \"date_id\"=$1 AND \"integration_id\"=$2 AND \"device_make_id\"=$3 AND \"property_id\"=$4 AND \"model\"=$5 AND \"year\"=$6", sel,
	)

	q := queries.Raw(query, dateID, integrationID, deviceMakeID, propertyID, model, year)

	err := q.Bind(ctx, exec, reportVehicleSignalsEventsAllObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from report_vehicle_signals_events_all")
	}

	if err = reportVehicleSignalsEventsAllObj.doAfterSelectHooks(ctx, exec); err != nil {
		return reportVehicleSignalsEventsAllObj, err
	}

	return reportVehicleSignalsEventsAllObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ReportVehicleSignalsEventsAll) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no report_vehicle_signals_events_all provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(reportVehicleSignalsEventsAllColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	reportVehicleSignalsEventsAllInsertCacheMut.RLock()
	cache, cached := reportVehicleSignalsEventsAllInsertCache[key]
	reportVehicleSignalsEventsAllInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			reportVehicleSignalsEventsAllAllColumns,
			reportVehicleSignalsEventsAllColumnsWithDefault,
			reportVehicleSignalsEventsAllColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(reportVehicleSignalsEventsAllType, reportVehicleSignalsEventsAllMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(reportVehicleSignalsEventsAllType, reportVehicleSignalsEventsAllMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"device_data_api\".\"report_vehicle_signals_events_all\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"device_data_api\".\"report_vehicle_signals_events_all\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into report_vehicle_signals_events_all")
	}

	if !cached {
		reportVehicleSignalsEventsAllInsertCacheMut.Lock()
		reportVehicleSignalsEventsAllInsertCache[key] = cache
		reportVehicleSignalsEventsAllInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ReportVehicleSignalsEventsAll.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ReportVehicleSignalsEventsAll) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	reportVehicleSignalsEventsAllUpdateCacheMut.RLock()
	cache, cached := reportVehicleSignalsEventsAllUpdateCache[key]
	reportVehicleSignalsEventsAllUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			reportVehicleSignalsEventsAllAllColumns,
			reportVehicleSignalsEventsAllPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update report_vehicle_signals_events_all, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"device_data_api\".\"report_vehicle_signals_events_all\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, reportVehicleSignalsEventsAllPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(reportVehicleSignalsEventsAllType, reportVehicleSignalsEventsAllMapping, append(wl, reportVehicleSignalsEventsAllPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update report_vehicle_signals_events_all row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for report_vehicle_signals_events_all")
	}

	if !cached {
		reportVehicleSignalsEventsAllUpdateCacheMut.Lock()
		reportVehicleSignalsEventsAllUpdateCache[key] = cache
		reportVehicleSignalsEventsAllUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q reportVehicleSignalsEventsAllQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for report_vehicle_signals_events_all")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for report_vehicle_signals_events_all")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ReportVehicleSignalsEventsAllSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reportVehicleSignalsEventsAllPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"device_data_api\".\"report_vehicle_signals_events_all\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, reportVehicleSignalsEventsAllPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in reportVehicleSignalsEventsAll slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all reportVehicleSignalsEventsAll")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ReportVehicleSignalsEventsAll) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no report_vehicle_signals_events_all provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(reportVehicleSignalsEventsAllColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	reportVehicleSignalsEventsAllUpsertCacheMut.RLock()
	cache, cached := reportVehicleSignalsEventsAllUpsertCache[key]
	reportVehicleSignalsEventsAllUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			reportVehicleSignalsEventsAllAllColumns,
			reportVehicleSignalsEventsAllColumnsWithDefault,
			reportVehicleSignalsEventsAllColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			reportVehicleSignalsEventsAllAllColumns,
			reportVehicleSignalsEventsAllPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert report_vehicle_signals_events_all, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(reportVehicleSignalsEventsAllPrimaryKeyColumns))
			copy(conflict, reportVehicleSignalsEventsAllPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"device_data_api\".\"report_vehicle_signals_events_all\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(reportVehicleSignalsEventsAllType, reportVehicleSignalsEventsAllMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(reportVehicleSignalsEventsAllType, reportVehicleSignalsEventsAllMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert report_vehicle_signals_events_all")
	}

	if !cached {
		reportVehicleSignalsEventsAllUpsertCacheMut.Lock()
		reportVehicleSignalsEventsAllUpsertCache[key] = cache
		reportVehicleSignalsEventsAllUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ReportVehicleSignalsEventsAll record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ReportVehicleSignalsEventsAll) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ReportVehicleSignalsEventsAll provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), reportVehicleSignalsEventsAllPrimaryKeyMapping)
	sql := "DELETE FROM \"device_data_api\".\"report_vehicle_signals_events_all\" WHERE \"date_id\"=$1 AND \"integration_id\"=$2 AND \"device_make_id\"=$3 AND \"property_id\"=$4 AND \"model\"=$5 AND \"year\"=$6"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from report_vehicle_signals_events_all")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for report_vehicle_signals_events_all")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q reportVehicleSignalsEventsAllQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no reportVehicleSignalsEventsAllQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from report_vehicle_signals_events_all")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for report_vehicle_signals_events_all")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ReportVehicleSignalsEventsAllSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(reportVehicleSignalsEventsAllBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reportVehicleSignalsEventsAllPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"device_data_api\".\"report_vehicle_signals_events_all\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, reportVehicleSignalsEventsAllPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from reportVehicleSignalsEventsAll slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for report_vehicle_signals_events_all")
	}

	if len(reportVehicleSignalsEventsAllAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ReportVehicleSignalsEventsAll) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindReportVehicleSignalsEventsAll(ctx, exec, o.DateID, o.IntegrationID, o.DeviceMakeID, o.PropertyID, o.Model, o.Year)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ReportVehicleSignalsEventsAllSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ReportVehicleSignalsEventsAllSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reportVehicleSignalsEventsAllPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"device_data_api\".\"report_vehicle_signals_events_all\".* FROM \"device_data_api\".\"report_vehicle_signals_events_all\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, reportVehicleSignalsEventsAllPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ReportVehicleSignalsEventsAllSlice")
	}

	*o = slice

	return nil
}

// ReportVehicleSignalsEventsAllExists checks if the ReportVehicleSignalsEventsAll row exists.
func ReportVehicleSignalsEventsAllExists(ctx context.Context, exec boil.ContextExecutor, dateID string, integrationID string, deviceMakeID string, propertyID string, model string, year int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"device_data_api\".\"report_vehicle_signals_events_all\" where \"date_id\"=$1 AND \"integration_id\"=$2 AND \"device_make_id\"=$3 AND \"property_id\"=$4 AND \"model\"=$5 AND \"year\"=$6 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, dateID, integrationID, deviceMakeID, propertyID, model, year)
	}
	row := exec.QueryRowContext(ctx, sql, dateID, integrationID, deviceMakeID, propertyID, model, year)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if report_vehicle_signals_events_all exists")
	}

	return exists, nil
}
