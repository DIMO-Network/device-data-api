// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ReportVehicleSignalsEventsTracking is an object representing the database table.
type ReportVehicleSignalsEventsTracking struct {
	DateID             string    `boil:"date_id" json:"date_id" toml:"date_id" yaml:"date_id"`
	IntegrationID      string    `boil:"integration_id" json:"integration_id" toml:"integration_id" yaml:"integration_id"`
	DeviceMakeID       string    `boil:"device_make_id" json:"device_make_id" toml:"device_make_id" yaml:"device_make_id"`
	PropertyID         string    `boil:"property_id" json:"property_id" toml:"property_id" yaml:"property_id"`
	Model              string    `boil:"model" json:"model" toml:"model" yaml:"model"`
	Year               int       `boil:"year" json:"year" toml:"year" yaml:"year"`
	DeviceDefinitionID string    `boil:"device_definition_id" json:"device_definition_id" toml:"device_definition_id" yaml:"device_definition_id"`
	DeviceMake         string    `boil:"device_make" json:"device_make" toml:"device_make" yaml:"device_make"`
	Count              int       `boil:"count" json:"count" toml:"count" yaml:"count"`
	CreatedAt          time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *reportVehicleSignalsEventsTrackingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L reportVehicleSignalsEventsTrackingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ReportVehicleSignalsEventsTrackingColumns = struct {
	DateID             string
	IntegrationID      string
	DeviceMakeID       string
	PropertyID         string
	Model              string
	Year               string
	DeviceDefinitionID string
	DeviceMake         string
	Count              string
	CreatedAt          string
}{
	DateID:             "date_id",
	IntegrationID:      "integration_id",
	DeviceMakeID:       "device_make_id",
	PropertyID:         "property_id",
	Model:              "model",
	Year:               "year",
	DeviceDefinitionID: "device_definition_id",
	DeviceMake:         "device_make",
	Count:              "count",
	CreatedAt:          "created_at",
}

var ReportVehicleSignalsEventsTrackingTableColumns = struct {
	DateID             string
	IntegrationID      string
	DeviceMakeID       string
	PropertyID         string
	Model              string
	Year               string
	DeviceDefinitionID string
	DeviceMake         string
	Count              string
	CreatedAt          string
}{
	DateID:             "report_vehicle_signals_events_tracking.date_id",
	IntegrationID:      "report_vehicle_signals_events_tracking.integration_id",
	DeviceMakeID:       "report_vehicle_signals_events_tracking.device_make_id",
	PropertyID:         "report_vehicle_signals_events_tracking.property_id",
	Model:              "report_vehicle_signals_events_tracking.model",
	Year:               "report_vehicle_signals_events_tracking.year",
	DeviceDefinitionID: "report_vehicle_signals_events_tracking.device_definition_id",
	DeviceMake:         "report_vehicle_signals_events_tracking.device_make",
	Count:              "report_vehicle_signals_events_tracking.count",
	CreatedAt:          "report_vehicle_signals_events_tracking.created_at",
}

// Generated where

var ReportVehicleSignalsEventsTrackingWhere = struct {
	DateID             whereHelperstring
	IntegrationID      whereHelperstring
	DeviceMakeID       whereHelperstring
	PropertyID         whereHelperstring
	Model              whereHelperstring
	Year               whereHelperint
	DeviceDefinitionID whereHelperstring
	DeviceMake         whereHelperstring
	Count              whereHelperint
	CreatedAt          whereHelpertime_Time
}{
	DateID:             whereHelperstring{field: "\"device_data_api\".\"report_vehicle_signals_events_tracking\".\"date_id\""},
	IntegrationID:      whereHelperstring{field: "\"device_data_api\".\"report_vehicle_signals_events_tracking\".\"integration_id\""},
	DeviceMakeID:       whereHelperstring{field: "\"device_data_api\".\"report_vehicle_signals_events_tracking\".\"device_make_id\""},
	PropertyID:         whereHelperstring{field: "\"device_data_api\".\"report_vehicle_signals_events_tracking\".\"property_id\""},
	Model:              whereHelperstring{field: "\"device_data_api\".\"report_vehicle_signals_events_tracking\".\"model\""},
	Year:               whereHelperint{field: "\"device_data_api\".\"report_vehicle_signals_events_tracking\".\"year\""},
	DeviceDefinitionID: whereHelperstring{field: "\"device_data_api\".\"report_vehicle_signals_events_tracking\".\"device_definition_id\""},
	DeviceMake:         whereHelperstring{field: "\"device_data_api\".\"report_vehicle_signals_events_tracking\".\"device_make\""},
	Count:              whereHelperint{field: "\"device_data_api\".\"report_vehicle_signals_events_tracking\".\"count\""},
	CreatedAt:          whereHelpertime_Time{field: "\"device_data_api\".\"report_vehicle_signals_events_tracking\".\"created_at\""},
}

// ReportVehicleSignalsEventsTrackingRels is where relationship names are stored.
var ReportVehicleSignalsEventsTrackingRels = struct {
}{}

// reportVehicleSignalsEventsTrackingR is where relationships are stored.
type reportVehicleSignalsEventsTrackingR struct {
}

// NewStruct creates a new relationship struct
func (*reportVehicleSignalsEventsTrackingR) NewStruct() *reportVehicleSignalsEventsTrackingR {
	return &reportVehicleSignalsEventsTrackingR{}
}

// reportVehicleSignalsEventsTrackingL is where Load methods for each relationship are stored.
type reportVehicleSignalsEventsTrackingL struct{}

var (
	reportVehicleSignalsEventsTrackingAllColumns            = []string{"date_id", "integration_id", "device_make_id", "property_id", "model", "year", "device_definition_id", "device_make", "count", "created_at"}
	reportVehicleSignalsEventsTrackingColumnsWithoutDefault = []string{"date_id", "integration_id", "device_make_id", "property_id", "model", "year", "device_definition_id", "device_make", "count"}
	reportVehicleSignalsEventsTrackingColumnsWithDefault    = []string{"created_at"}
	reportVehicleSignalsEventsTrackingPrimaryKeyColumns     = []string{"date_id", "integration_id", "device_make_id", "property_id", "model", "year"}
	reportVehicleSignalsEventsTrackingGeneratedColumns      = []string{}
)

type (
	// ReportVehicleSignalsEventsTrackingSlice is an alias for a slice of pointers to ReportVehicleSignalsEventsTracking.
	// This should almost always be used instead of []ReportVehicleSignalsEventsTracking.
	ReportVehicleSignalsEventsTrackingSlice []*ReportVehicleSignalsEventsTracking
	// ReportVehicleSignalsEventsTrackingHook is the signature for custom ReportVehicleSignalsEventsTracking hook methods
	ReportVehicleSignalsEventsTrackingHook func(context.Context, boil.ContextExecutor, *ReportVehicleSignalsEventsTracking) error

	reportVehicleSignalsEventsTrackingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	reportVehicleSignalsEventsTrackingType                 = reflect.TypeOf(&ReportVehicleSignalsEventsTracking{})
	reportVehicleSignalsEventsTrackingMapping              = queries.MakeStructMapping(reportVehicleSignalsEventsTrackingType)
	reportVehicleSignalsEventsTrackingPrimaryKeyMapping, _ = queries.BindMapping(reportVehicleSignalsEventsTrackingType, reportVehicleSignalsEventsTrackingMapping, reportVehicleSignalsEventsTrackingPrimaryKeyColumns)
	reportVehicleSignalsEventsTrackingInsertCacheMut       sync.RWMutex
	reportVehicleSignalsEventsTrackingInsertCache          = make(map[string]insertCache)
	reportVehicleSignalsEventsTrackingUpdateCacheMut       sync.RWMutex
	reportVehicleSignalsEventsTrackingUpdateCache          = make(map[string]updateCache)
	reportVehicleSignalsEventsTrackingUpsertCacheMut       sync.RWMutex
	reportVehicleSignalsEventsTrackingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var reportVehicleSignalsEventsTrackingAfterSelectHooks []ReportVehicleSignalsEventsTrackingHook

var reportVehicleSignalsEventsTrackingBeforeInsertHooks []ReportVehicleSignalsEventsTrackingHook
var reportVehicleSignalsEventsTrackingAfterInsertHooks []ReportVehicleSignalsEventsTrackingHook

var reportVehicleSignalsEventsTrackingBeforeUpdateHooks []ReportVehicleSignalsEventsTrackingHook
var reportVehicleSignalsEventsTrackingAfterUpdateHooks []ReportVehicleSignalsEventsTrackingHook

var reportVehicleSignalsEventsTrackingBeforeDeleteHooks []ReportVehicleSignalsEventsTrackingHook
var reportVehicleSignalsEventsTrackingAfterDeleteHooks []ReportVehicleSignalsEventsTrackingHook

var reportVehicleSignalsEventsTrackingBeforeUpsertHooks []ReportVehicleSignalsEventsTrackingHook
var reportVehicleSignalsEventsTrackingAfterUpsertHooks []ReportVehicleSignalsEventsTrackingHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ReportVehicleSignalsEventsTracking) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reportVehicleSignalsEventsTrackingAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ReportVehicleSignalsEventsTracking) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reportVehicleSignalsEventsTrackingBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ReportVehicleSignalsEventsTracking) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reportVehicleSignalsEventsTrackingAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ReportVehicleSignalsEventsTracking) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reportVehicleSignalsEventsTrackingBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ReportVehicleSignalsEventsTracking) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reportVehicleSignalsEventsTrackingAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ReportVehicleSignalsEventsTracking) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reportVehicleSignalsEventsTrackingBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ReportVehicleSignalsEventsTracking) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reportVehicleSignalsEventsTrackingAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ReportVehicleSignalsEventsTracking) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reportVehicleSignalsEventsTrackingBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ReportVehicleSignalsEventsTracking) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reportVehicleSignalsEventsTrackingAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddReportVehicleSignalsEventsTrackingHook registers your hook function for all future operations.
func AddReportVehicleSignalsEventsTrackingHook(hookPoint boil.HookPoint, reportVehicleSignalsEventsTrackingHook ReportVehicleSignalsEventsTrackingHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		reportVehicleSignalsEventsTrackingAfterSelectHooks = append(reportVehicleSignalsEventsTrackingAfterSelectHooks, reportVehicleSignalsEventsTrackingHook)
	case boil.BeforeInsertHook:
		reportVehicleSignalsEventsTrackingBeforeInsertHooks = append(reportVehicleSignalsEventsTrackingBeforeInsertHooks, reportVehicleSignalsEventsTrackingHook)
	case boil.AfterInsertHook:
		reportVehicleSignalsEventsTrackingAfterInsertHooks = append(reportVehicleSignalsEventsTrackingAfterInsertHooks, reportVehicleSignalsEventsTrackingHook)
	case boil.BeforeUpdateHook:
		reportVehicleSignalsEventsTrackingBeforeUpdateHooks = append(reportVehicleSignalsEventsTrackingBeforeUpdateHooks, reportVehicleSignalsEventsTrackingHook)
	case boil.AfterUpdateHook:
		reportVehicleSignalsEventsTrackingAfterUpdateHooks = append(reportVehicleSignalsEventsTrackingAfterUpdateHooks, reportVehicleSignalsEventsTrackingHook)
	case boil.BeforeDeleteHook:
		reportVehicleSignalsEventsTrackingBeforeDeleteHooks = append(reportVehicleSignalsEventsTrackingBeforeDeleteHooks, reportVehicleSignalsEventsTrackingHook)
	case boil.AfterDeleteHook:
		reportVehicleSignalsEventsTrackingAfterDeleteHooks = append(reportVehicleSignalsEventsTrackingAfterDeleteHooks, reportVehicleSignalsEventsTrackingHook)
	case boil.BeforeUpsertHook:
		reportVehicleSignalsEventsTrackingBeforeUpsertHooks = append(reportVehicleSignalsEventsTrackingBeforeUpsertHooks, reportVehicleSignalsEventsTrackingHook)
	case boil.AfterUpsertHook:
		reportVehicleSignalsEventsTrackingAfterUpsertHooks = append(reportVehicleSignalsEventsTrackingAfterUpsertHooks, reportVehicleSignalsEventsTrackingHook)
	}
}

// One returns a single reportVehicleSignalsEventsTracking record from the query.
func (q reportVehicleSignalsEventsTrackingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ReportVehicleSignalsEventsTracking, error) {
	o := &ReportVehicleSignalsEventsTracking{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for report_vehicle_signals_events_tracking")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ReportVehicleSignalsEventsTracking records from the query.
func (q reportVehicleSignalsEventsTrackingQuery) All(ctx context.Context, exec boil.ContextExecutor) (ReportVehicleSignalsEventsTrackingSlice, error) {
	var o []*ReportVehicleSignalsEventsTracking

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ReportVehicleSignalsEventsTracking slice")
	}

	if len(reportVehicleSignalsEventsTrackingAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ReportVehicleSignalsEventsTracking records in the query.
func (q reportVehicleSignalsEventsTrackingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count report_vehicle_signals_events_tracking rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q reportVehicleSignalsEventsTrackingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if report_vehicle_signals_events_tracking exists")
	}

	return count > 0, nil
}

// ReportVehicleSignalsEventsTrackings retrieves all the records using an executor.
func ReportVehicleSignalsEventsTrackings(mods ...qm.QueryMod) reportVehicleSignalsEventsTrackingQuery {
	mods = append(mods, qm.From("\"device_data_api\".\"report_vehicle_signals_events_tracking\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"device_data_api\".\"report_vehicle_signals_events_tracking\".*"})
	}

	return reportVehicleSignalsEventsTrackingQuery{q}
}

// FindReportVehicleSignalsEventsTracking retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindReportVehicleSignalsEventsTracking(ctx context.Context, exec boil.ContextExecutor, dateID string, integrationID string, deviceMakeID string, propertyID string, model string, year int, selectCols ...string) (*ReportVehicleSignalsEventsTracking, error) {
	reportVehicleSignalsEventsTrackingObj := &ReportVehicleSignalsEventsTracking{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"device_data_api\".\"report_vehicle_signals_events_tracking\" where \"date_id\"=$1 AND \"integration_id\"=$2 AND \"device_make_id\"=$3 AND \"property_id\"=$4 AND \"model\"=$5 AND \"year\"=$6", sel,
	)

	q := queries.Raw(query, dateID, integrationID, deviceMakeID, propertyID, model, year)

	err := q.Bind(ctx, exec, reportVehicleSignalsEventsTrackingObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from report_vehicle_signals_events_tracking")
	}

	if err = reportVehicleSignalsEventsTrackingObj.doAfterSelectHooks(ctx, exec); err != nil {
		return reportVehicleSignalsEventsTrackingObj, err
	}

	return reportVehicleSignalsEventsTrackingObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ReportVehicleSignalsEventsTracking) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no report_vehicle_signals_events_tracking provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(reportVehicleSignalsEventsTrackingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	reportVehicleSignalsEventsTrackingInsertCacheMut.RLock()
	cache, cached := reportVehicleSignalsEventsTrackingInsertCache[key]
	reportVehicleSignalsEventsTrackingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			reportVehicleSignalsEventsTrackingAllColumns,
			reportVehicleSignalsEventsTrackingColumnsWithDefault,
			reportVehicleSignalsEventsTrackingColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(reportVehicleSignalsEventsTrackingType, reportVehicleSignalsEventsTrackingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(reportVehicleSignalsEventsTrackingType, reportVehicleSignalsEventsTrackingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"device_data_api\".\"report_vehicle_signals_events_tracking\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"device_data_api\".\"report_vehicle_signals_events_tracking\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into report_vehicle_signals_events_tracking")
	}

	if !cached {
		reportVehicleSignalsEventsTrackingInsertCacheMut.Lock()
		reportVehicleSignalsEventsTrackingInsertCache[key] = cache
		reportVehicleSignalsEventsTrackingInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ReportVehicleSignalsEventsTracking.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ReportVehicleSignalsEventsTracking) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	reportVehicleSignalsEventsTrackingUpdateCacheMut.RLock()
	cache, cached := reportVehicleSignalsEventsTrackingUpdateCache[key]
	reportVehicleSignalsEventsTrackingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			reportVehicleSignalsEventsTrackingAllColumns,
			reportVehicleSignalsEventsTrackingPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update report_vehicle_signals_events_tracking, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"device_data_api\".\"report_vehicle_signals_events_tracking\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, reportVehicleSignalsEventsTrackingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(reportVehicleSignalsEventsTrackingType, reportVehicleSignalsEventsTrackingMapping, append(wl, reportVehicleSignalsEventsTrackingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update report_vehicle_signals_events_tracking row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for report_vehicle_signals_events_tracking")
	}

	if !cached {
		reportVehicleSignalsEventsTrackingUpdateCacheMut.Lock()
		reportVehicleSignalsEventsTrackingUpdateCache[key] = cache
		reportVehicleSignalsEventsTrackingUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q reportVehicleSignalsEventsTrackingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for report_vehicle_signals_events_tracking")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for report_vehicle_signals_events_tracking")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ReportVehicleSignalsEventsTrackingSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reportVehicleSignalsEventsTrackingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"device_data_api\".\"report_vehicle_signals_events_tracking\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, reportVehicleSignalsEventsTrackingPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in reportVehicleSignalsEventsTracking slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all reportVehicleSignalsEventsTracking")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ReportVehicleSignalsEventsTracking) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no report_vehicle_signals_events_tracking provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(reportVehicleSignalsEventsTrackingColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	reportVehicleSignalsEventsTrackingUpsertCacheMut.RLock()
	cache, cached := reportVehicleSignalsEventsTrackingUpsertCache[key]
	reportVehicleSignalsEventsTrackingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			reportVehicleSignalsEventsTrackingAllColumns,
			reportVehicleSignalsEventsTrackingColumnsWithDefault,
			reportVehicleSignalsEventsTrackingColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			reportVehicleSignalsEventsTrackingAllColumns,
			reportVehicleSignalsEventsTrackingPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert report_vehicle_signals_events_tracking, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(reportVehicleSignalsEventsTrackingPrimaryKeyColumns))
			copy(conflict, reportVehicleSignalsEventsTrackingPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"device_data_api\".\"report_vehicle_signals_events_tracking\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(reportVehicleSignalsEventsTrackingType, reportVehicleSignalsEventsTrackingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(reportVehicleSignalsEventsTrackingType, reportVehicleSignalsEventsTrackingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert report_vehicle_signals_events_tracking")
	}

	if !cached {
		reportVehicleSignalsEventsTrackingUpsertCacheMut.Lock()
		reportVehicleSignalsEventsTrackingUpsertCache[key] = cache
		reportVehicleSignalsEventsTrackingUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ReportVehicleSignalsEventsTracking record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ReportVehicleSignalsEventsTracking) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ReportVehicleSignalsEventsTracking provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), reportVehicleSignalsEventsTrackingPrimaryKeyMapping)
	sql := "DELETE FROM \"device_data_api\".\"report_vehicle_signals_events_tracking\" WHERE \"date_id\"=$1 AND \"integration_id\"=$2 AND \"device_make_id\"=$3 AND \"property_id\"=$4 AND \"model\"=$5 AND \"year\"=$6"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from report_vehicle_signals_events_tracking")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for report_vehicle_signals_events_tracking")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q reportVehicleSignalsEventsTrackingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no reportVehicleSignalsEventsTrackingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from report_vehicle_signals_events_tracking")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for report_vehicle_signals_events_tracking")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ReportVehicleSignalsEventsTrackingSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(reportVehicleSignalsEventsTrackingBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reportVehicleSignalsEventsTrackingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"device_data_api\".\"report_vehicle_signals_events_tracking\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, reportVehicleSignalsEventsTrackingPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from reportVehicleSignalsEventsTracking slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for report_vehicle_signals_events_tracking")
	}

	if len(reportVehicleSignalsEventsTrackingAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ReportVehicleSignalsEventsTracking) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindReportVehicleSignalsEventsTracking(ctx, exec, o.DateID, o.IntegrationID, o.DeviceMakeID, o.PropertyID, o.Model, o.Year)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ReportVehicleSignalsEventsTrackingSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ReportVehicleSignalsEventsTrackingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reportVehicleSignalsEventsTrackingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"device_data_api\".\"report_vehicle_signals_events_tracking\".* FROM \"device_data_api\".\"report_vehicle_signals_events_tracking\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, reportVehicleSignalsEventsTrackingPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ReportVehicleSignalsEventsTrackingSlice")
	}

	*o = slice

	return nil
}

// ReportVehicleSignalsEventsTrackingExists checks if the ReportVehicleSignalsEventsTracking row exists.
func ReportVehicleSignalsEventsTrackingExists(ctx context.Context, exec boil.ContextExecutor, dateID string, integrationID string, deviceMakeID string, propertyID string, model string, year int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"device_data_api\".\"report_vehicle_signals_events_tracking\" where \"date_id\"=$1 AND \"integration_id\"=$2 AND \"device_make_id\"=$3 AND \"property_id\"=$4 AND \"model\"=$5 AND \"year\"=$6 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, dateID, integrationID, deviceMakeID, propertyID, model, year)
	}
	row := exec.QueryRowContext(ctx, sql, dateID, integrationID, deviceMakeID, propertyID, model, year)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if report_vehicle_signals_events_tracking exists")
	}

	return exists, nil
}

// Exists checks if the ReportVehicleSignalsEventsTracking row exists.
func (o *ReportVehicleSignalsEventsTracking) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ReportVehicleSignalsEventsTrackingExists(ctx, exec, o.DateID, o.IntegrationID, o.DeviceMakeID, o.PropertyID, o.Model, o.Year)
}
