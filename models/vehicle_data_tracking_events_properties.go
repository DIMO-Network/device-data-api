// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// VehicleDataTrackingEventsProperty is an object representing the database table.
type VehicleDataTrackingEventsProperty struct {
	IntegrationID string      `boil:"integration_id" json:"integration_id" toml:"integration_id" yaml:"integration_id"`
	DeviceMakeID  string      `boil:"device_make_id" json:"device_make_id" toml:"device_make_id" yaml:"device_make_id"`
	PropertyID    string      `boil:"property_id" json:"property_id" toml:"property_id" yaml:"property_id"`
	Model         string      `boil:"model" json:"model" toml:"model" yaml:"model"`
	Year          int         `boil:"year" json:"year" toml:"year" yaml:"year"`
	Description   null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	Count         int         `boil:"count" json:"count" toml:"count" yaml:"count"`
	CreatedAt     time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *vehicleDataTrackingEventsPropertyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L vehicleDataTrackingEventsPropertyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VehicleDataTrackingEventsPropertyColumns = struct {
	IntegrationID string
	DeviceMakeID  string
	PropertyID    string
	Model         string
	Year          string
	Description   string
	Count         string
	CreatedAt     string
}{
	IntegrationID: "integration_id",
	DeviceMakeID:  "device_make_id",
	PropertyID:    "property_id",
	Model:         "model",
	Year:          "year",
	Description:   "description",
	Count:         "count",
	CreatedAt:     "created_at",
}

var VehicleDataTrackingEventsPropertyTableColumns = struct {
	IntegrationID string
	DeviceMakeID  string
	PropertyID    string
	Model         string
	Year          string
	Description   string
	Count         string
	CreatedAt     string
}{
	IntegrationID: "vehicle_data_tracking_events_properties.integration_id",
	DeviceMakeID:  "vehicle_data_tracking_events_properties.device_make_id",
	PropertyID:    "vehicle_data_tracking_events_properties.property_id",
	Model:         "vehicle_data_tracking_events_properties.model",
	Year:          "vehicle_data_tracking_events_properties.year",
	Description:   "vehicle_data_tracking_events_properties.description",
	Count:         "vehicle_data_tracking_events_properties.count",
	CreatedAt:     "vehicle_data_tracking_events_properties.created_at",
}

// Generated where

var VehicleDataTrackingEventsPropertyWhere = struct {
	IntegrationID whereHelperstring
	DeviceMakeID  whereHelperstring
	PropertyID    whereHelperstring
	Model         whereHelperstring
	Year          whereHelperint
	Description   whereHelpernull_String
	Count         whereHelperint
	CreatedAt     whereHelpertime_Time
}{
	IntegrationID: whereHelperstring{field: "\"device_data_api\".\"vehicle_data_tracking_events_properties\".\"integration_id\""},
	DeviceMakeID:  whereHelperstring{field: "\"device_data_api\".\"vehicle_data_tracking_events_properties\".\"device_make_id\""},
	PropertyID:    whereHelperstring{field: "\"device_data_api\".\"vehicle_data_tracking_events_properties\".\"property_id\""},
	Model:         whereHelperstring{field: "\"device_data_api\".\"vehicle_data_tracking_events_properties\".\"model\""},
	Year:          whereHelperint{field: "\"device_data_api\".\"vehicle_data_tracking_events_properties\".\"year\""},
	Description:   whereHelpernull_String{field: "\"device_data_api\".\"vehicle_data_tracking_events_properties\".\"description\""},
	Count:         whereHelperint{field: "\"device_data_api\".\"vehicle_data_tracking_events_properties\".\"count\""},
	CreatedAt:     whereHelpertime_Time{field: "\"device_data_api\".\"vehicle_data_tracking_events_properties\".\"created_at\""},
}

// VehicleDataTrackingEventsPropertyRels is where relationship names are stored.
var VehicleDataTrackingEventsPropertyRels = struct {
}{}

// vehicleDataTrackingEventsPropertyR is where relationships are stored.
type vehicleDataTrackingEventsPropertyR struct {
}

// NewStruct creates a new relationship struct
func (*vehicleDataTrackingEventsPropertyR) NewStruct() *vehicleDataTrackingEventsPropertyR {
	return &vehicleDataTrackingEventsPropertyR{}
}

// vehicleDataTrackingEventsPropertyL is where Load methods for each relationship are stored.
type vehicleDataTrackingEventsPropertyL struct{}

var (
	vehicleDataTrackingEventsPropertyAllColumns            = []string{"integration_id", "device_make_id", "property_id", "model", "year", "description", "count", "created_at"}
	vehicleDataTrackingEventsPropertyColumnsWithoutDefault = []string{"integration_id", "device_make_id", "property_id", "model", "year", "count"}
	vehicleDataTrackingEventsPropertyColumnsWithDefault    = []string{"description", "created_at"}
	vehicleDataTrackingEventsPropertyPrimaryKeyColumns     = []string{"integration_id", "device_make_id", "property_id"}
	vehicleDataTrackingEventsPropertyGeneratedColumns      = []string{}
)

type (
	// VehicleDataTrackingEventsPropertySlice is an alias for a slice of pointers to VehicleDataTrackingEventsProperty.
	// This should almost always be used instead of []VehicleDataTrackingEventsProperty.
	VehicleDataTrackingEventsPropertySlice []*VehicleDataTrackingEventsProperty
	// VehicleDataTrackingEventsPropertyHook is the signature for custom VehicleDataTrackingEventsProperty hook methods
	VehicleDataTrackingEventsPropertyHook func(context.Context, boil.ContextExecutor, *VehicleDataTrackingEventsProperty) error

	vehicleDataTrackingEventsPropertyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	vehicleDataTrackingEventsPropertyType                 = reflect.TypeOf(&VehicleDataTrackingEventsProperty{})
	vehicleDataTrackingEventsPropertyMapping              = queries.MakeStructMapping(vehicleDataTrackingEventsPropertyType)
	vehicleDataTrackingEventsPropertyPrimaryKeyMapping, _ = queries.BindMapping(vehicleDataTrackingEventsPropertyType, vehicleDataTrackingEventsPropertyMapping, vehicleDataTrackingEventsPropertyPrimaryKeyColumns)
	vehicleDataTrackingEventsPropertyInsertCacheMut       sync.RWMutex
	vehicleDataTrackingEventsPropertyInsertCache          = make(map[string]insertCache)
	vehicleDataTrackingEventsPropertyUpdateCacheMut       sync.RWMutex
	vehicleDataTrackingEventsPropertyUpdateCache          = make(map[string]updateCache)
	vehicleDataTrackingEventsPropertyUpsertCacheMut       sync.RWMutex
	vehicleDataTrackingEventsPropertyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var vehicleDataTrackingEventsPropertyAfterSelectHooks []VehicleDataTrackingEventsPropertyHook

var vehicleDataTrackingEventsPropertyBeforeInsertHooks []VehicleDataTrackingEventsPropertyHook
var vehicleDataTrackingEventsPropertyAfterInsertHooks []VehicleDataTrackingEventsPropertyHook

var vehicleDataTrackingEventsPropertyBeforeUpdateHooks []VehicleDataTrackingEventsPropertyHook
var vehicleDataTrackingEventsPropertyAfterUpdateHooks []VehicleDataTrackingEventsPropertyHook

var vehicleDataTrackingEventsPropertyBeforeDeleteHooks []VehicleDataTrackingEventsPropertyHook
var vehicleDataTrackingEventsPropertyAfterDeleteHooks []VehicleDataTrackingEventsPropertyHook

var vehicleDataTrackingEventsPropertyBeforeUpsertHooks []VehicleDataTrackingEventsPropertyHook
var vehicleDataTrackingEventsPropertyAfterUpsertHooks []VehicleDataTrackingEventsPropertyHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *VehicleDataTrackingEventsProperty) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleDataTrackingEventsPropertyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *VehicleDataTrackingEventsProperty) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleDataTrackingEventsPropertyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *VehicleDataTrackingEventsProperty) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleDataTrackingEventsPropertyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *VehicleDataTrackingEventsProperty) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleDataTrackingEventsPropertyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *VehicleDataTrackingEventsProperty) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleDataTrackingEventsPropertyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *VehicleDataTrackingEventsProperty) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleDataTrackingEventsPropertyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *VehicleDataTrackingEventsProperty) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleDataTrackingEventsPropertyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *VehicleDataTrackingEventsProperty) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleDataTrackingEventsPropertyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *VehicleDataTrackingEventsProperty) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleDataTrackingEventsPropertyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVehicleDataTrackingEventsPropertyHook registers your hook function for all future operations.
func AddVehicleDataTrackingEventsPropertyHook(hookPoint boil.HookPoint, vehicleDataTrackingEventsPropertyHook VehicleDataTrackingEventsPropertyHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		vehicleDataTrackingEventsPropertyAfterSelectHooks = append(vehicleDataTrackingEventsPropertyAfterSelectHooks, vehicleDataTrackingEventsPropertyHook)
	case boil.BeforeInsertHook:
		vehicleDataTrackingEventsPropertyBeforeInsertHooks = append(vehicleDataTrackingEventsPropertyBeforeInsertHooks, vehicleDataTrackingEventsPropertyHook)
	case boil.AfterInsertHook:
		vehicleDataTrackingEventsPropertyAfterInsertHooks = append(vehicleDataTrackingEventsPropertyAfterInsertHooks, vehicleDataTrackingEventsPropertyHook)
	case boil.BeforeUpdateHook:
		vehicleDataTrackingEventsPropertyBeforeUpdateHooks = append(vehicleDataTrackingEventsPropertyBeforeUpdateHooks, vehicleDataTrackingEventsPropertyHook)
	case boil.AfterUpdateHook:
		vehicleDataTrackingEventsPropertyAfterUpdateHooks = append(vehicleDataTrackingEventsPropertyAfterUpdateHooks, vehicleDataTrackingEventsPropertyHook)
	case boil.BeforeDeleteHook:
		vehicleDataTrackingEventsPropertyBeforeDeleteHooks = append(vehicleDataTrackingEventsPropertyBeforeDeleteHooks, vehicleDataTrackingEventsPropertyHook)
	case boil.AfterDeleteHook:
		vehicleDataTrackingEventsPropertyAfterDeleteHooks = append(vehicleDataTrackingEventsPropertyAfterDeleteHooks, vehicleDataTrackingEventsPropertyHook)
	case boil.BeforeUpsertHook:
		vehicleDataTrackingEventsPropertyBeforeUpsertHooks = append(vehicleDataTrackingEventsPropertyBeforeUpsertHooks, vehicleDataTrackingEventsPropertyHook)
	case boil.AfterUpsertHook:
		vehicleDataTrackingEventsPropertyAfterUpsertHooks = append(vehicleDataTrackingEventsPropertyAfterUpsertHooks, vehicleDataTrackingEventsPropertyHook)
	}
}

// One returns a single vehicleDataTrackingEventsProperty record from the query.
func (q vehicleDataTrackingEventsPropertyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*VehicleDataTrackingEventsProperty, error) {
	o := &VehicleDataTrackingEventsProperty{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for vehicle_data_tracking_events_properties")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all VehicleDataTrackingEventsProperty records from the query.
func (q vehicleDataTrackingEventsPropertyQuery) All(ctx context.Context, exec boil.ContextExecutor) (VehicleDataTrackingEventsPropertySlice, error) {
	var o []*VehicleDataTrackingEventsProperty

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to VehicleDataTrackingEventsProperty slice")
	}

	if len(vehicleDataTrackingEventsPropertyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all VehicleDataTrackingEventsProperty records in the query.
func (q vehicleDataTrackingEventsPropertyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count vehicle_data_tracking_events_properties rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q vehicleDataTrackingEventsPropertyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if vehicle_data_tracking_events_properties exists")
	}

	return count > 0, nil
}

// VehicleDataTrackingEventsProperties retrieves all the records using an executor.
func VehicleDataTrackingEventsProperties(mods ...qm.QueryMod) vehicleDataTrackingEventsPropertyQuery {
	mods = append(mods, qm.From("\"device_data_api\".\"vehicle_data_tracking_events_properties\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"device_data_api\".\"vehicle_data_tracking_events_properties\".*"})
	}

	return vehicleDataTrackingEventsPropertyQuery{q}
}

// FindVehicleDataTrackingEventsProperty retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVehicleDataTrackingEventsProperty(ctx context.Context, exec boil.ContextExecutor, integrationID string, deviceMakeID string, propertyID string, selectCols ...string) (*VehicleDataTrackingEventsProperty, error) {
	vehicleDataTrackingEventsPropertyObj := &VehicleDataTrackingEventsProperty{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"device_data_api\".\"vehicle_data_tracking_events_properties\" where \"integration_id\"=$1 AND \"device_make_id\"=$2 AND \"property_id\"=$3", sel,
	)

	q := queries.Raw(query, integrationID, deviceMakeID, propertyID)

	err := q.Bind(ctx, exec, vehicleDataTrackingEventsPropertyObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from vehicle_data_tracking_events_properties")
	}

	if err = vehicleDataTrackingEventsPropertyObj.doAfterSelectHooks(ctx, exec); err != nil {
		return vehicleDataTrackingEventsPropertyObj, err
	}

	return vehicleDataTrackingEventsPropertyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *VehicleDataTrackingEventsProperty) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no vehicle_data_tracking_events_properties provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(vehicleDataTrackingEventsPropertyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	vehicleDataTrackingEventsPropertyInsertCacheMut.RLock()
	cache, cached := vehicleDataTrackingEventsPropertyInsertCache[key]
	vehicleDataTrackingEventsPropertyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			vehicleDataTrackingEventsPropertyAllColumns,
			vehicleDataTrackingEventsPropertyColumnsWithDefault,
			vehicleDataTrackingEventsPropertyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(vehicleDataTrackingEventsPropertyType, vehicleDataTrackingEventsPropertyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(vehicleDataTrackingEventsPropertyType, vehicleDataTrackingEventsPropertyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"device_data_api\".\"vehicle_data_tracking_events_properties\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"device_data_api\".\"vehicle_data_tracking_events_properties\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into vehicle_data_tracking_events_properties")
	}

	if !cached {
		vehicleDataTrackingEventsPropertyInsertCacheMut.Lock()
		vehicleDataTrackingEventsPropertyInsertCache[key] = cache
		vehicleDataTrackingEventsPropertyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the VehicleDataTrackingEventsProperty.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *VehicleDataTrackingEventsProperty) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	vehicleDataTrackingEventsPropertyUpdateCacheMut.RLock()
	cache, cached := vehicleDataTrackingEventsPropertyUpdateCache[key]
	vehicleDataTrackingEventsPropertyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			vehicleDataTrackingEventsPropertyAllColumns,
			vehicleDataTrackingEventsPropertyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update vehicle_data_tracking_events_properties, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"device_data_api\".\"vehicle_data_tracking_events_properties\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, vehicleDataTrackingEventsPropertyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(vehicleDataTrackingEventsPropertyType, vehicleDataTrackingEventsPropertyMapping, append(wl, vehicleDataTrackingEventsPropertyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update vehicle_data_tracking_events_properties row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for vehicle_data_tracking_events_properties")
	}

	if !cached {
		vehicleDataTrackingEventsPropertyUpdateCacheMut.Lock()
		vehicleDataTrackingEventsPropertyUpdateCache[key] = cache
		vehicleDataTrackingEventsPropertyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q vehicleDataTrackingEventsPropertyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for vehicle_data_tracking_events_properties")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for vehicle_data_tracking_events_properties")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VehicleDataTrackingEventsPropertySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vehicleDataTrackingEventsPropertyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"device_data_api\".\"vehicle_data_tracking_events_properties\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, vehicleDataTrackingEventsPropertyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in vehicleDataTrackingEventsProperty slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all vehicleDataTrackingEventsProperty")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *VehicleDataTrackingEventsProperty) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no vehicle_data_tracking_events_properties provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(vehicleDataTrackingEventsPropertyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	vehicleDataTrackingEventsPropertyUpsertCacheMut.RLock()
	cache, cached := vehicleDataTrackingEventsPropertyUpsertCache[key]
	vehicleDataTrackingEventsPropertyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			vehicleDataTrackingEventsPropertyAllColumns,
			vehicleDataTrackingEventsPropertyColumnsWithDefault,
			vehicleDataTrackingEventsPropertyColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			vehicleDataTrackingEventsPropertyAllColumns,
			vehicleDataTrackingEventsPropertyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert vehicle_data_tracking_events_properties, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(vehicleDataTrackingEventsPropertyPrimaryKeyColumns))
			copy(conflict, vehicleDataTrackingEventsPropertyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"device_data_api\".\"vehicle_data_tracking_events_properties\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(vehicleDataTrackingEventsPropertyType, vehicleDataTrackingEventsPropertyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(vehicleDataTrackingEventsPropertyType, vehicleDataTrackingEventsPropertyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert vehicle_data_tracking_events_properties")
	}

	if !cached {
		vehicleDataTrackingEventsPropertyUpsertCacheMut.Lock()
		vehicleDataTrackingEventsPropertyUpsertCache[key] = cache
		vehicleDataTrackingEventsPropertyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single VehicleDataTrackingEventsProperty record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *VehicleDataTrackingEventsProperty) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no VehicleDataTrackingEventsProperty provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), vehicleDataTrackingEventsPropertyPrimaryKeyMapping)
	sql := "DELETE FROM \"device_data_api\".\"vehicle_data_tracking_events_properties\" WHERE \"integration_id\"=$1 AND \"device_make_id\"=$2 AND \"property_id\"=$3"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from vehicle_data_tracking_events_properties")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for vehicle_data_tracking_events_properties")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q vehicleDataTrackingEventsPropertyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no vehicleDataTrackingEventsPropertyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from vehicle_data_tracking_events_properties")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for vehicle_data_tracking_events_properties")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VehicleDataTrackingEventsPropertySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(vehicleDataTrackingEventsPropertyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vehicleDataTrackingEventsPropertyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"device_data_api\".\"vehicle_data_tracking_events_properties\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vehicleDataTrackingEventsPropertyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from vehicleDataTrackingEventsProperty slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for vehicle_data_tracking_events_properties")
	}

	if len(vehicleDataTrackingEventsPropertyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *VehicleDataTrackingEventsProperty) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVehicleDataTrackingEventsProperty(ctx, exec, o.IntegrationID, o.DeviceMakeID, o.PropertyID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VehicleDataTrackingEventsPropertySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VehicleDataTrackingEventsPropertySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vehicleDataTrackingEventsPropertyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"device_data_api\".\"vehicle_data_tracking_events_properties\".* FROM \"device_data_api\".\"vehicle_data_tracking_events_properties\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vehicleDataTrackingEventsPropertyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in VehicleDataTrackingEventsPropertySlice")
	}

	*o = slice

	return nil
}

// VehicleDataTrackingEventsPropertyExists checks if the VehicleDataTrackingEventsProperty row exists.
func VehicleDataTrackingEventsPropertyExists(ctx context.Context, exec boil.ContextExecutor, integrationID string, deviceMakeID string, propertyID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"device_data_api\".\"vehicle_data_tracking_events_properties\" where \"integration_id\"=$1 AND \"device_make_id\"=$2 AND \"property_id\"=$3 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, integrationID, deviceMakeID, propertyID)
	}
	row := exec.QueryRowContext(ctx, sql, integrationID, deviceMakeID, propertyID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if vehicle_data_tracking_events_properties exists")
	}

	return exists, nil
}
