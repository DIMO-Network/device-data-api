// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// VehicleSignalsTrackingEventsMissingProperty is an object representing the database table.
type VehicleSignalsTrackingEventsMissingProperty struct {
	IntegrationID string      `boil:"integration_id" json:"integration_id" toml:"integration_id" yaml:"integration_id"`
	DeviceMakeID  string      `boil:"device_make_id" json:"device_make_id" toml:"device_make_id" yaml:"device_make_id"`
	PropertyID    string      `boil:"property_id" json:"property_id" toml:"property_id" yaml:"property_id"`
	Model         string      `boil:"model" json:"model" toml:"model" yaml:"model"`
	Year          int         `boil:"year" json:"year" toml:"year" yaml:"year"`
	Description   null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	Count         int         `boil:"count" json:"count" toml:"count" yaml:"count"`
	CreatedAt     time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *vehicleSignalsTrackingEventsMissingPropertyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L vehicleSignalsTrackingEventsMissingPropertyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VehicleSignalsTrackingEventsMissingPropertyColumns = struct {
	IntegrationID string
	DeviceMakeID  string
	PropertyID    string
	Model         string
	Year          string
	Description   string
	Count         string
	CreatedAt     string
}{
	IntegrationID: "integration_id",
	DeviceMakeID:  "device_make_id",
	PropertyID:    "property_id",
	Model:         "model",
	Year:          "year",
	Description:   "description",
	Count:         "count",
	CreatedAt:     "created_at",
}

var VehicleSignalsTrackingEventsMissingPropertyTableColumns = struct {
	IntegrationID string
	DeviceMakeID  string
	PropertyID    string
	Model         string
	Year          string
	Description   string
	Count         string
	CreatedAt     string
}{
	IntegrationID: "vehicle_signals_tracking_events_missing_properties.integration_id",
	DeviceMakeID:  "vehicle_signals_tracking_events_missing_properties.device_make_id",
	PropertyID:    "vehicle_signals_tracking_events_missing_properties.property_id",
	Model:         "vehicle_signals_tracking_events_missing_properties.model",
	Year:          "vehicle_signals_tracking_events_missing_properties.year",
	Description:   "vehicle_signals_tracking_events_missing_properties.description",
	Count:         "vehicle_signals_tracking_events_missing_properties.count",
	CreatedAt:     "vehicle_signals_tracking_events_missing_properties.created_at",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var VehicleSignalsTrackingEventsMissingPropertyWhere = struct {
	IntegrationID whereHelperstring
	DeviceMakeID  whereHelperstring
	PropertyID    whereHelperstring
	Model         whereHelperstring
	Year          whereHelperint
	Description   whereHelpernull_String
	Count         whereHelperint
	CreatedAt     whereHelpertime_Time
}{
	IntegrationID: whereHelperstring{field: "\"device_data_api\".\"vehicle_signals_tracking_events_missing_properties\".\"integration_id\""},
	DeviceMakeID:  whereHelperstring{field: "\"device_data_api\".\"vehicle_signals_tracking_events_missing_properties\".\"device_make_id\""},
	PropertyID:    whereHelperstring{field: "\"device_data_api\".\"vehicle_signals_tracking_events_missing_properties\".\"property_id\""},
	Model:         whereHelperstring{field: "\"device_data_api\".\"vehicle_signals_tracking_events_missing_properties\".\"model\""},
	Year:          whereHelperint{field: "\"device_data_api\".\"vehicle_signals_tracking_events_missing_properties\".\"year\""},
	Description:   whereHelpernull_String{field: "\"device_data_api\".\"vehicle_signals_tracking_events_missing_properties\".\"description\""},
	Count:         whereHelperint{field: "\"device_data_api\".\"vehicle_signals_tracking_events_missing_properties\".\"count\""},
	CreatedAt:     whereHelpertime_Time{field: "\"device_data_api\".\"vehicle_signals_tracking_events_missing_properties\".\"created_at\""},
}

// VehicleSignalsTrackingEventsMissingPropertyRels is where relationship names are stored.
var VehicleSignalsTrackingEventsMissingPropertyRels = struct {
}{}

// vehicleSignalsTrackingEventsMissingPropertyR is where relationships are stored.
type vehicleSignalsTrackingEventsMissingPropertyR struct {
}

// NewStruct creates a new relationship struct
func (*vehicleSignalsTrackingEventsMissingPropertyR) NewStruct() *vehicleSignalsTrackingEventsMissingPropertyR {
	return &vehicleSignalsTrackingEventsMissingPropertyR{}
}

// vehicleSignalsTrackingEventsMissingPropertyL is where Load methods for each relationship are stored.
type vehicleSignalsTrackingEventsMissingPropertyL struct{}

var (
	vehicleSignalsTrackingEventsMissingPropertyAllColumns            = []string{"integration_id", "device_make_id", "property_id", "model", "year", "description", "count", "created_at"}
	vehicleSignalsTrackingEventsMissingPropertyColumnsWithoutDefault = []string{"integration_id", "device_make_id", "property_id", "model", "year", "count"}
	vehicleSignalsTrackingEventsMissingPropertyColumnsWithDefault    = []string{"description", "created_at"}
	vehicleSignalsTrackingEventsMissingPropertyPrimaryKeyColumns     = []string{"integration_id", "device_make_id", "property_id"}
	vehicleSignalsTrackingEventsMissingPropertyGeneratedColumns      = []string{}
)

type (
	// VehicleSignalsTrackingEventsMissingPropertySlice is an alias for a slice of pointers to VehicleSignalsTrackingEventsMissingProperty.
	// This should almost always be used instead of []VehicleSignalsTrackingEventsMissingProperty.
	VehicleSignalsTrackingEventsMissingPropertySlice []*VehicleSignalsTrackingEventsMissingProperty
	// VehicleSignalsTrackingEventsMissingPropertyHook is the signature for custom VehicleSignalsTrackingEventsMissingProperty hook methods
	VehicleSignalsTrackingEventsMissingPropertyHook func(context.Context, boil.ContextExecutor, *VehicleSignalsTrackingEventsMissingProperty) error

	vehicleSignalsTrackingEventsMissingPropertyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	vehicleSignalsTrackingEventsMissingPropertyType                 = reflect.TypeOf(&VehicleSignalsTrackingEventsMissingProperty{})
	vehicleSignalsTrackingEventsMissingPropertyMapping              = queries.MakeStructMapping(vehicleSignalsTrackingEventsMissingPropertyType)
	vehicleSignalsTrackingEventsMissingPropertyPrimaryKeyMapping, _ = queries.BindMapping(vehicleSignalsTrackingEventsMissingPropertyType, vehicleSignalsTrackingEventsMissingPropertyMapping, vehicleSignalsTrackingEventsMissingPropertyPrimaryKeyColumns)
	vehicleSignalsTrackingEventsMissingPropertyInsertCacheMut       sync.RWMutex
	vehicleSignalsTrackingEventsMissingPropertyInsertCache          = make(map[string]insertCache)
	vehicleSignalsTrackingEventsMissingPropertyUpdateCacheMut       sync.RWMutex
	vehicleSignalsTrackingEventsMissingPropertyUpdateCache          = make(map[string]updateCache)
	vehicleSignalsTrackingEventsMissingPropertyUpsertCacheMut       sync.RWMutex
	vehicleSignalsTrackingEventsMissingPropertyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var vehicleSignalsTrackingEventsMissingPropertyAfterSelectHooks []VehicleSignalsTrackingEventsMissingPropertyHook

var vehicleSignalsTrackingEventsMissingPropertyBeforeInsertHooks []VehicleSignalsTrackingEventsMissingPropertyHook
var vehicleSignalsTrackingEventsMissingPropertyAfterInsertHooks []VehicleSignalsTrackingEventsMissingPropertyHook

var vehicleSignalsTrackingEventsMissingPropertyBeforeUpdateHooks []VehicleSignalsTrackingEventsMissingPropertyHook
var vehicleSignalsTrackingEventsMissingPropertyAfterUpdateHooks []VehicleSignalsTrackingEventsMissingPropertyHook

var vehicleSignalsTrackingEventsMissingPropertyBeforeDeleteHooks []VehicleSignalsTrackingEventsMissingPropertyHook
var vehicleSignalsTrackingEventsMissingPropertyAfterDeleteHooks []VehicleSignalsTrackingEventsMissingPropertyHook

var vehicleSignalsTrackingEventsMissingPropertyBeforeUpsertHooks []VehicleSignalsTrackingEventsMissingPropertyHook
var vehicleSignalsTrackingEventsMissingPropertyAfterUpsertHooks []VehicleSignalsTrackingEventsMissingPropertyHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *VehicleSignalsTrackingEventsMissingProperty) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleSignalsTrackingEventsMissingPropertyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *VehicleSignalsTrackingEventsMissingProperty) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleSignalsTrackingEventsMissingPropertyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *VehicleSignalsTrackingEventsMissingProperty) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleSignalsTrackingEventsMissingPropertyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *VehicleSignalsTrackingEventsMissingProperty) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleSignalsTrackingEventsMissingPropertyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *VehicleSignalsTrackingEventsMissingProperty) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleSignalsTrackingEventsMissingPropertyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *VehicleSignalsTrackingEventsMissingProperty) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleSignalsTrackingEventsMissingPropertyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *VehicleSignalsTrackingEventsMissingProperty) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleSignalsTrackingEventsMissingPropertyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *VehicleSignalsTrackingEventsMissingProperty) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleSignalsTrackingEventsMissingPropertyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *VehicleSignalsTrackingEventsMissingProperty) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleSignalsTrackingEventsMissingPropertyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVehicleSignalsTrackingEventsMissingPropertyHook registers your hook function for all future operations.
func AddVehicleSignalsTrackingEventsMissingPropertyHook(hookPoint boil.HookPoint, vehicleSignalsTrackingEventsMissingPropertyHook VehicleSignalsTrackingEventsMissingPropertyHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		vehicleSignalsTrackingEventsMissingPropertyAfterSelectHooks = append(vehicleSignalsTrackingEventsMissingPropertyAfterSelectHooks, vehicleSignalsTrackingEventsMissingPropertyHook)
	case boil.BeforeInsertHook:
		vehicleSignalsTrackingEventsMissingPropertyBeforeInsertHooks = append(vehicleSignalsTrackingEventsMissingPropertyBeforeInsertHooks, vehicleSignalsTrackingEventsMissingPropertyHook)
	case boil.AfterInsertHook:
		vehicleSignalsTrackingEventsMissingPropertyAfterInsertHooks = append(vehicleSignalsTrackingEventsMissingPropertyAfterInsertHooks, vehicleSignalsTrackingEventsMissingPropertyHook)
	case boil.BeforeUpdateHook:
		vehicleSignalsTrackingEventsMissingPropertyBeforeUpdateHooks = append(vehicleSignalsTrackingEventsMissingPropertyBeforeUpdateHooks, vehicleSignalsTrackingEventsMissingPropertyHook)
	case boil.AfterUpdateHook:
		vehicleSignalsTrackingEventsMissingPropertyAfterUpdateHooks = append(vehicleSignalsTrackingEventsMissingPropertyAfterUpdateHooks, vehicleSignalsTrackingEventsMissingPropertyHook)
	case boil.BeforeDeleteHook:
		vehicleSignalsTrackingEventsMissingPropertyBeforeDeleteHooks = append(vehicleSignalsTrackingEventsMissingPropertyBeforeDeleteHooks, vehicleSignalsTrackingEventsMissingPropertyHook)
	case boil.AfterDeleteHook:
		vehicleSignalsTrackingEventsMissingPropertyAfterDeleteHooks = append(vehicleSignalsTrackingEventsMissingPropertyAfterDeleteHooks, vehicleSignalsTrackingEventsMissingPropertyHook)
	case boil.BeforeUpsertHook:
		vehicleSignalsTrackingEventsMissingPropertyBeforeUpsertHooks = append(vehicleSignalsTrackingEventsMissingPropertyBeforeUpsertHooks, vehicleSignalsTrackingEventsMissingPropertyHook)
	case boil.AfterUpsertHook:
		vehicleSignalsTrackingEventsMissingPropertyAfterUpsertHooks = append(vehicleSignalsTrackingEventsMissingPropertyAfterUpsertHooks, vehicleSignalsTrackingEventsMissingPropertyHook)
	}
}

// One returns a single vehicleSignalsTrackingEventsMissingProperty record from the query.
func (q vehicleSignalsTrackingEventsMissingPropertyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*VehicleSignalsTrackingEventsMissingProperty, error) {
	o := &VehicleSignalsTrackingEventsMissingProperty{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for vehicle_signals_tracking_events_missing_properties")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all VehicleSignalsTrackingEventsMissingProperty records from the query.
func (q vehicleSignalsTrackingEventsMissingPropertyQuery) All(ctx context.Context, exec boil.ContextExecutor) (VehicleSignalsTrackingEventsMissingPropertySlice, error) {
	var o []*VehicleSignalsTrackingEventsMissingProperty

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to VehicleSignalsTrackingEventsMissingProperty slice")
	}

	if len(vehicleSignalsTrackingEventsMissingPropertyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all VehicleSignalsTrackingEventsMissingProperty records in the query.
func (q vehicleSignalsTrackingEventsMissingPropertyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count vehicle_signals_tracking_events_missing_properties rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q vehicleSignalsTrackingEventsMissingPropertyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if vehicle_signals_tracking_events_missing_properties exists")
	}

	return count > 0, nil
}

// VehicleSignalsTrackingEventsMissingProperties retrieves all the records using an executor.
func VehicleSignalsTrackingEventsMissingProperties(mods ...qm.QueryMod) vehicleSignalsTrackingEventsMissingPropertyQuery {
	mods = append(mods, qm.From("\"device_data_api\".\"vehicle_signals_tracking_events_missing_properties\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"device_data_api\".\"vehicle_signals_tracking_events_missing_properties\".*"})
	}

	return vehicleSignalsTrackingEventsMissingPropertyQuery{q}
}

// FindVehicleSignalsTrackingEventsMissingProperty retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVehicleSignalsTrackingEventsMissingProperty(ctx context.Context, exec boil.ContextExecutor, integrationID string, deviceMakeID string, propertyID string, selectCols ...string) (*VehicleSignalsTrackingEventsMissingProperty, error) {
	vehicleSignalsTrackingEventsMissingPropertyObj := &VehicleSignalsTrackingEventsMissingProperty{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"device_data_api\".\"vehicle_signals_tracking_events_missing_properties\" where \"integration_id\"=$1 AND \"device_make_id\"=$2 AND \"property_id\"=$3", sel,
	)

	q := queries.Raw(query, integrationID, deviceMakeID, propertyID)

	err := q.Bind(ctx, exec, vehicleSignalsTrackingEventsMissingPropertyObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from vehicle_signals_tracking_events_missing_properties")
	}

	if err = vehicleSignalsTrackingEventsMissingPropertyObj.doAfterSelectHooks(ctx, exec); err != nil {
		return vehicleSignalsTrackingEventsMissingPropertyObj, err
	}

	return vehicleSignalsTrackingEventsMissingPropertyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *VehicleSignalsTrackingEventsMissingProperty) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no vehicle_signals_tracking_events_missing_properties provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(vehicleSignalsTrackingEventsMissingPropertyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	vehicleSignalsTrackingEventsMissingPropertyInsertCacheMut.RLock()
	cache, cached := vehicleSignalsTrackingEventsMissingPropertyInsertCache[key]
	vehicleSignalsTrackingEventsMissingPropertyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			vehicleSignalsTrackingEventsMissingPropertyAllColumns,
			vehicleSignalsTrackingEventsMissingPropertyColumnsWithDefault,
			vehicleSignalsTrackingEventsMissingPropertyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(vehicleSignalsTrackingEventsMissingPropertyType, vehicleSignalsTrackingEventsMissingPropertyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(vehicleSignalsTrackingEventsMissingPropertyType, vehicleSignalsTrackingEventsMissingPropertyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"device_data_api\".\"vehicle_signals_tracking_events_missing_properties\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"device_data_api\".\"vehicle_signals_tracking_events_missing_properties\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into vehicle_signals_tracking_events_missing_properties")
	}

	if !cached {
		vehicleSignalsTrackingEventsMissingPropertyInsertCacheMut.Lock()
		vehicleSignalsTrackingEventsMissingPropertyInsertCache[key] = cache
		vehicleSignalsTrackingEventsMissingPropertyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the VehicleSignalsTrackingEventsMissingProperty.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *VehicleSignalsTrackingEventsMissingProperty) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	vehicleSignalsTrackingEventsMissingPropertyUpdateCacheMut.RLock()
	cache, cached := vehicleSignalsTrackingEventsMissingPropertyUpdateCache[key]
	vehicleSignalsTrackingEventsMissingPropertyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			vehicleSignalsTrackingEventsMissingPropertyAllColumns,
			vehicleSignalsTrackingEventsMissingPropertyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update vehicle_signals_tracking_events_missing_properties, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"device_data_api\".\"vehicle_signals_tracking_events_missing_properties\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, vehicleSignalsTrackingEventsMissingPropertyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(vehicleSignalsTrackingEventsMissingPropertyType, vehicleSignalsTrackingEventsMissingPropertyMapping, append(wl, vehicleSignalsTrackingEventsMissingPropertyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update vehicle_signals_tracking_events_missing_properties row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for vehicle_signals_tracking_events_missing_properties")
	}

	if !cached {
		vehicleSignalsTrackingEventsMissingPropertyUpdateCacheMut.Lock()
		vehicleSignalsTrackingEventsMissingPropertyUpdateCache[key] = cache
		vehicleSignalsTrackingEventsMissingPropertyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q vehicleSignalsTrackingEventsMissingPropertyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for vehicle_signals_tracking_events_missing_properties")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for vehicle_signals_tracking_events_missing_properties")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VehicleSignalsTrackingEventsMissingPropertySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vehicleSignalsTrackingEventsMissingPropertyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"device_data_api\".\"vehicle_signals_tracking_events_missing_properties\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, vehicleSignalsTrackingEventsMissingPropertyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in vehicleSignalsTrackingEventsMissingProperty slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all vehicleSignalsTrackingEventsMissingProperty")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *VehicleSignalsTrackingEventsMissingProperty) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no vehicle_signals_tracking_events_missing_properties provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(vehicleSignalsTrackingEventsMissingPropertyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	vehicleSignalsTrackingEventsMissingPropertyUpsertCacheMut.RLock()
	cache, cached := vehicleSignalsTrackingEventsMissingPropertyUpsertCache[key]
	vehicleSignalsTrackingEventsMissingPropertyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			vehicleSignalsTrackingEventsMissingPropertyAllColumns,
			vehicleSignalsTrackingEventsMissingPropertyColumnsWithDefault,
			vehicleSignalsTrackingEventsMissingPropertyColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			vehicleSignalsTrackingEventsMissingPropertyAllColumns,
			vehicleSignalsTrackingEventsMissingPropertyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert vehicle_signals_tracking_events_missing_properties, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(vehicleSignalsTrackingEventsMissingPropertyPrimaryKeyColumns))
			copy(conflict, vehicleSignalsTrackingEventsMissingPropertyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"device_data_api\".\"vehicle_signals_tracking_events_missing_properties\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(vehicleSignalsTrackingEventsMissingPropertyType, vehicleSignalsTrackingEventsMissingPropertyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(vehicleSignalsTrackingEventsMissingPropertyType, vehicleSignalsTrackingEventsMissingPropertyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert vehicle_signals_tracking_events_missing_properties")
	}

	if !cached {
		vehicleSignalsTrackingEventsMissingPropertyUpsertCacheMut.Lock()
		vehicleSignalsTrackingEventsMissingPropertyUpsertCache[key] = cache
		vehicleSignalsTrackingEventsMissingPropertyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single VehicleSignalsTrackingEventsMissingProperty record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *VehicleSignalsTrackingEventsMissingProperty) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no VehicleSignalsTrackingEventsMissingProperty provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), vehicleSignalsTrackingEventsMissingPropertyPrimaryKeyMapping)
	sql := "DELETE FROM \"device_data_api\".\"vehicle_signals_tracking_events_missing_properties\" WHERE \"integration_id\"=$1 AND \"device_make_id\"=$2 AND \"property_id\"=$3"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from vehicle_signals_tracking_events_missing_properties")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for vehicle_signals_tracking_events_missing_properties")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q vehicleSignalsTrackingEventsMissingPropertyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no vehicleSignalsTrackingEventsMissingPropertyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from vehicle_signals_tracking_events_missing_properties")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for vehicle_signals_tracking_events_missing_properties")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VehicleSignalsTrackingEventsMissingPropertySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(vehicleSignalsTrackingEventsMissingPropertyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vehicleSignalsTrackingEventsMissingPropertyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"device_data_api\".\"vehicle_signals_tracking_events_missing_properties\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vehicleSignalsTrackingEventsMissingPropertyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from vehicleSignalsTrackingEventsMissingProperty slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for vehicle_signals_tracking_events_missing_properties")
	}

	if len(vehicleSignalsTrackingEventsMissingPropertyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *VehicleSignalsTrackingEventsMissingProperty) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVehicleSignalsTrackingEventsMissingProperty(ctx, exec, o.IntegrationID, o.DeviceMakeID, o.PropertyID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VehicleSignalsTrackingEventsMissingPropertySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VehicleSignalsTrackingEventsMissingPropertySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vehicleSignalsTrackingEventsMissingPropertyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"device_data_api\".\"vehicle_signals_tracking_events_missing_properties\".* FROM \"device_data_api\".\"vehicle_signals_tracking_events_missing_properties\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vehicleSignalsTrackingEventsMissingPropertyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in VehicleSignalsTrackingEventsMissingPropertySlice")
	}

	*o = slice

	return nil
}

// VehicleSignalsTrackingEventsMissingPropertyExists checks if the VehicleSignalsTrackingEventsMissingProperty row exists.
func VehicleSignalsTrackingEventsMissingPropertyExists(ctx context.Context, exec boil.ContextExecutor, integrationID string, deviceMakeID string, propertyID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"device_data_api\".\"vehicle_signals_tracking_events_missing_properties\" where \"integration_id\"=$1 AND \"device_make_id\"=$2 AND \"property_id\"=$3 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, integrationID, deviceMakeID, propertyID)
	}
	row := exec.QueryRowContext(ctx, sql, integrationID, deviceMakeID, propertyID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if vehicle_signals_tracking_events_missing_properties exists")
	}

	return exists, nil
}
