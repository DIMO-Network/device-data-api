// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// VehicleSignalsJob is an object representing the database table.
type VehicleSignalsJob struct {
	VehicleSignalsJobID string    `boil:"vehicle_signals_job_id" json:"vehicle_signals_job_id" toml:"vehicle_signals_job_id" yaml:"vehicle_signals_job_id"`
	StartDate           time.Time `boil:"start_date" json:"start_date" toml:"start_date" yaml:"start_date"`
	EndDate             time.Time `boil:"end_date" json:"end_date" toml:"end_date" yaml:"end_date"`
	CreatedAt           time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *vehicleSignalsJobR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L vehicleSignalsJobL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VehicleSignalsJobColumns = struct {
	VehicleSignalsJobID string
	StartDate           string
	EndDate             string
	CreatedAt           string
}{
	VehicleSignalsJobID: "vehicle_signals_job_id",
	StartDate:           "start_date",
	EndDate:             "end_date",
	CreatedAt:           "created_at",
}

var VehicleSignalsJobTableColumns = struct {
	VehicleSignalsJobID string
	StartDate           string
	EndDate             string
	CreatedAt           string
}{
	VehicleSignalsJobID: "vehicle_signals_job.vehicle_signals_job_id",
	StartDate:           "vehicle_signals_job.start_date",
	EndDate:             "vehicle_signals_job.end_date",
	CreatedAt:           "vehicle_signals_job.created_at",
}

// Generated where

var VehicleSignalsJobWhere = struct {
	VehicleSignalsJobID whereHelperstring
	StartDate           whereHelpertime_Time
	EndDate             whereHelpertime_Time
	CreatedAt           whereHelpertime_Time
}{
	VehicleSignalsJobID: whereHelperstring{field: "\"device_data_api\".\"vehicle_signals_job\".\"vehicle_signals_job_id\""},
	StartDate:           whereHelpertime_Time{field: "\"device_data_api\".\"vehicle_signals_job\".\"start_date\""},
	EndDate:             whereHelpertime_Time{field: "\"device_data_api\".\"vehicle_signals_job\".\"end_date\""},
	CreatedAt:           whereHelpertime_Time{field: "\"device_data_api\".\"vehicle_signals_job\".\"created_at\""},
}

// VehicleSignalsJobRels is where relationship names are stored.
var VehicleSignalsJobRels = struct {
}{}

// vehicleSignalsJobR is where relationships are stored.
type vehicleSignalsJobR struct {
}

// NewStruct creates a new relationship struct
func (*vehicleSignalsJobR) NewStruct() *vehicleSignalsJobR {
	return &vehicleSignalsJobR{}
}

// vehicleSignalsJobL is where Load methods for each relationship are stored.
type vehicleSignalsJobL struct{}

var (
	vehicleSignalsJobAllColumns            = []string{"vehicle_signals_job_id", "start_date", "end_date", "created_at"}
	vehicleSignalsJobColumnsWithoutDefault = []string{"vehicle_signals_job_id", "start_date", "end_date"}
	vehicleSignalsJobColumnsWithDefault    = []string{"created_at"}
	vehicleSignalsJobPrimaryKeyColumns     = []string{"vehicle_signals_job_id"}
	vehicleSignalsJobGeneratedColumns      = []string{}
)

type (
	// VehicleSignalsJobSlice is an alias for a slice of pointers to VehicleSignalsJob.
	// This should almost always be used instead of []VehicleSignalsJob.
	VehicleSignalsJobSlice []*VehicleSignalsJob
	// VehicleSignalsJobHook is the signature for custom VehicleSignalsJob hook methods
	VehicleSignalsJobHook func(context.Context, boil.ContextExecutor, *VehicleSignalsJob) error

	vehicleSignalsJobQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	vehicleSignalsJobType                 = reflect.TypeOf(&VehicleSignalsJob{})
	vehicleSignalsJobMapping              = queries.MakeStructMapping(vehicleSignalsJobType)
	vehicleSignalsJobPrimaryKeyMapping, _ = queries.BindMapping(vehicleSignalsJobType, vehicleSignalsJobMapping, vehicleSignalsJobPrimaryKeyColumns)
	vehicleSignalsJobInsertCacheMut       sync.RWMutex
	vehicleSignalsJobInsertCache          = make(map[string]insertCache)
	vehicleSignalsJobUpdateCacheMut       sync.RWMutex
	vehicleSignalsJobUpdateCache          = make(map[string]updateCache)
	vehicleSignalsJobUpsertCacheMut       sync.RWMutex
	vehicleSignalsJobUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var vehicleSignalsJobAfterSelectHooks []VehicleSignalsJobHook

var vehicleSignalsJobBeforeInsertHooks []VehicleSignalsJobHook
var vehicleSignalsJobAfterInsertHooks []VehicleSignalsJobHook

var vehicleSignalsJobBeforeUpdateHooks []VehicleSignalsJobHook
var vehicleSignalsJobAfterUpdateHooks []VehicleSignalsJobHook

var vehicleSignalsJobBeforeDeleteHooks []VehicleSignalsJobHook
var vehicleSignalsJobAfterDeleteHooks []VehicleSignalsJobHook

var vehicleSignalsJobBeforeUpsertHooks []VehicleSignalsJobHook
var vehicleSignalsJobAfterUpsertHooks []VehicleSignalsJobHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *VehicleSignalsJob) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleSignalsJobAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *VehicleSignalsJob) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleSignalsJobBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *VehicleSignalsJob) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleSignalsJobAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *VehicleSignalsJob) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleSignalsJobBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *VehicleSignalsJob) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleSignalsJobAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *VehicleSignalsJob) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleSignalsJobBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *VehicleSignalsJob) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleSignalsJobAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *VehicleSignalsJob) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleSignalsJobBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *VehicleSignalsJob) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleSignalsJobAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVehicleSignalsJobHook registers your hook function for all future operations.
func AddVehicleSignalsJobHook(hookPoint boil.HookPoint, vehicleSignalsJobHook VehicleSignalsJobHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		vehicleSignalsJobAfterSelectHooks = append(vehicleSignalsJobAfterSelectHooks, vehicleSignalsJobHook)
	case boil.BeforeInsertHook:
		vehicleSignalsJobBeforeInsertHooks = append(vehicleSignalsJobBeforeInsertHooks, vehicleSignalsJobHook)
	case boil.AfterInsertHook:
		vehicleSignalsJobAfterInsertHooks = append(vehicleSignalsJobAfterInsertHooks, vehicleSignalsJobHook)
	case boil.BeforeUpdateHook:
		vehicleSignalsJobBeforeUpdateHooks = append(vehicleSignalsJobBeforeUpdateHooks, vehicleSignalsJobHook)
	case boil.AfterUpdateHook:
		vehicleSignalsJobAfterUpdateHooks = append(vehicleSignalsJobAfterUpdateHooks, vehicleSignalsJobHook)
	case boil.BeforeDeleteHook:
		vehicleSignalsJobBeforeDeleteHooks = append(vehicleSignalsJobBeforeDeleteHooks, vehicleSignalsJobHook)
	case boil.AfterDeleteHook:
		vehicleSignalsJobAfterDeleteHooks = append(vehicleSignalsJobAfterDeleteHooks, vehicleSignalsJobHook)
	case boil.BeforeUpsertHook:
		vehicleSignalsJobBeforeUpsertHooks = append(vehicleSignalsJobBeforeUpsertHooks, vehicleSignalsJobHook)
	case boil.AfterUpsertHook:
		vehicleSignalsJobAfterUpsertHooks = append(vehicleSignalsJobAfterUpsertHooks, vehicleSignalsJobHook)
	}
}

// One returns a single vehicleSignalsJob record from the query.
func (q vehicleSignalsJobQuery) One(ctx context.Context, exec boil.ContextExecutor) (*VehicleSignalsJob, error) {
	o := &VehicleSignalsJob{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for vehicle_signals_job")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all VehicleSignalsJob records from the query.
func (q vehicleSignalsJobQuery) All(ctx context.Context, exec boil.ContextExecutor) (VehicleSignalsJobSlice, error) {
	var o []*VehicleSignalsJob

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to VehicleSignalsJob slice")
	}

	if len(vehicleSignalsJobAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all VehicleSignalsJob records in the query.
func (q vehicleSignalsJobQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count vehicle_signals_job rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q vehicleSignalsJobQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if vehicle_signals_job exists")
	}

	return count > 0, nil
}

// VehicleSignalsJobs retrieves all the records using an executor.
func VehicleSignalsJobs(mods ...qm.QueryMod) vehicleSignalsJobQuery {
	mods = append(mods, qm.From("\"device_data_api\".\"vehicle_signals_job\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"device_data_api\".\"vehicle_signals_job\".*"})
	}

	return vehicleSignalsJobQuery{q}
}

// FindVehicleSignalsJob retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVehicleSignalsJob(ctx context.Context, exec boil.ContextExecutor, vehicleSignalsJobID string, selectCols ...string) (*VehicleSignalsJob, error) {
	vehicleSignalsJobObj := &VehicleSignalsJob{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"device_data_api\".\"vehicle_signals_job\" where \"vehicle_signals_job_id\"=$1", sel,
	)

	q := queries.Raw(query, vehicleSignalsJobID)

	err := q.Bind(ctx, exec, vehicleSignalsJobObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from vehicle_signals_job")
	}

	if err = vehicleSignalsJobObj.doAfterSelectHooks(ctx, exec); err != nil {
		return vehicleSignalsJobObj, err
	}

	return vehicleSignalsJobObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *VehicleSignalsJob) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no vehicle_signals_job provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(vehicleSignalsJobColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	vehicleSignalsJobInsertCacheMut.RLock()
	cache, cached := vehicleSignalsJobInsertCache[key]
	vehicleSignalsJobInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			vehicleSignalsJobAllColumns,
			vehicleSignalsJobColumnsWithDefault,
			vehicleSignalsJobColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(vehicleSignalsJobType, vehicleSignalsJobMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(vehicleSignalsJobType, vehicleSignalsJobMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"device_data_api\".\"vehicle_signals_job\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"device_data_api\".\"vehicle_signals_job\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into vehicle_signals_job")
	}

	if !cached {
		vehicleSignalsJobInsertCacheMut.Lock()
		vehicleSignalsJobInsertCache[key] = cache
		vehicleSignalsJobInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the VehicleSignalsJob.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *VehicleSignalsJob) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	vehicleSignalsJobUpdateCacheMut.RLock()
	cache, cached := vehicleSignalsJobUpdateCache[key]
	vehicleSignalsJobUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			vehicleSignalsJobAllColumns,
			vehicleSignalsJobPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update vehicle_signals_job, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"device_data_api\".\"vehicle_signals_job\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, vehicleSignalsJobPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(vehicleSignalsJobType, vehicleSignalsJobMapping, append(wl, vehicleSignalsJobPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update vehicle_signals_job row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for vehicle_signals_job")
	}

	if !cached {
		vehicleSignalsJobUpdateCacheMut.Lock()
		vehicleSignalsJobUpdateCache[key] = cache
		vehicleSignalsJobUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q vehicleSignalsJobQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for vehicle_signals_job")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for vehicle_signals_job")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VehicleSignalsJobSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vehicleSignalsJobPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"device_data_api\".\"vehicle_signals_job\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, vehicleSignalsJobPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in vehicleSignalsJob slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all vehicleSignalsJob")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *VehicleSignalsJob) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no vehicle_signals_job provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(vehicleSignalsJobColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	vehicleSignalsJobUpsertCacheMut.RLock()
	cache, cached := vehicleSignalsJobUpsertCache[key]
	vehicleSignalsJobUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			vehicleSignalsJobAllColumns,
			vehicleSignalsJobColumnsWithDefault,
			vehicleSignalsJobColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			vehicleSignalsJobAllColumns,
			vehicleSignalsJobPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert vehicle_signals_job, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(vehicleSignalsJobPrimaryKeyColumns))
			copy(conflict, vehicleSignalsJobPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"device_data_api\".\"vehicle_signals_job\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(vehicleSignalsJobType, vehicleSignalsJobMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(vehicleSignalsJobType, vehicleSignalsJobMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert vehicle_signals_job")
	}

	if !cached {
		vehicleSignalsJobUpsertCacheMut.Lock()
		vehicleSignalsJobUpsertCache[key] = cache
		vehicleSignalsJobUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single VehicleSignalsJob record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *VehicleSignalsJob) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no VehicleSignalsJob provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), vehicleSignalsJobPrimaryKeyMapping)
	sql := "DELETE FROM \"device_data_api\".\"vehicle_signals_job\" WHERE \"vehicle_signals_job_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from vehicle_signals_job")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for vehicle_signals_job")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q vehicleSignalsJobQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no vehicleSignalsJobQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from vehicle_signals_job")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for vehicle_signals_job")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VehicleSignalsJobSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(vehicleSignalsJobBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vehicleSignalsJobPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"device_data_api\".\"vehicle_signals_job\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vehicleSignalsJobPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from vehicleSignalsJob slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for vehicle_signals_job")
	}

	if len(vehicleSignalsJobAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *VehicleSignalsJob) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVehicleSignalsJob(ctx, exec, o.VehicleSignalsJobID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VehicleSignalsJobSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VehicleSignalsJobSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vehicleSignalsJobPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"device_data_api\".\"vehicle_signals_job\".* FROM \"device_data_api\".\"vehicle_signals_job\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vehicleSignalsJobPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in VehicleSignalsJobSlice")
	}

	*o = slice

	return nil
}

// VehicleSignalsJobExists checks if the VehicleSignalsJob row exists.
func VehicleSignalsJobExists(ctx context.Context, exec boil.ContextExecutor, vehicleSignalsJobID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"device_data_api\".\"vehicle_signals_job\" where \"vehicle_signals_job_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, vehicleSignalsJobID)
	}
	row := exec.QueryRowContext(ctx, sql, vehicleSignalsJobID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if vehicle_signals_job exists")
	}

	return exists, nil
}
