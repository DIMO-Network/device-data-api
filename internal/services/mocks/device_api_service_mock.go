// Code generated by MockGen. DO NOT EDIT.
// Source: device_api_service.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	devices "github.com/DIMO-Network/shared/api/devices"
	gomock "github.com/golang/mock/gomock"
)

// MockDeviceAPIService is a mock of DeviceAPIService interface.
type MockDeviceAPIService struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceAPIServiceMockRecorder
}

// MockDeviceAPIServiceMockRecorder is the mock recorder for MockDeviceAPIService.
type MockDeviceAPIServiceMockRecorder struct {
	mock *MockDeviceAPIService
}

// NewMockDeviceAPIService creates a new mock instance.
func NewMockDeviceAPIService(ctrl *gomock.Controller) *MockDeviceAPIService {
	mock := &MockDeviceAPIService{ctrl: ctrl}
	mock.recorder = &MockDeviceAPIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceAPIService) EXPECT() *MockDeviceAPIServiceMockRecorder {
	return m.recorder
}

// GetUserDevice mocks base method.
func (m *MockDeviceAPIService) GetUserDevice(ctx context.Context, userDeviceID string) (*devices.UserDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDevice", ctx, userDeviceID)
	ret0, _ := ret[0].(*devices.UserDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDevice indicates an expected call of GetUserDevice.
func (mr *MockDeviceAPIServiceMockRecorder) GetUserDevice(ctx, userDeviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDevice", reflect.TypeOf((*MockDeviceAPIService)(nil).GetUserDevice), ctx, userDeviceID)
}

// ListUserDevicesForUser mocks base method.
func (m *MockDeviceAPIService) ListUserDevicesForUser(ctx context.Context, userID string) (*devices.ListUserDevicesForUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserDevicesForUser", ctx, userID)
	ret0, _ := ret[0].(*devices.ListUserDevicesForUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserDevicesForUser indicates an expected call of ListUserDevicesForUser.
func (mr *MockDeviceAPIServiceMockRecorder) ListUserDevicesForUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserDevicesForUser", reflect.TypeOf((*MockDeviceAPIService)(nil).ListUserDevicesForUser), ctx, userID)
}

// UserDeviceBelongsToUserId mocks base method.
func (m *MockDeviceAPIService) UserDeviceBelongsToUserId(ctx context.Context, userID, userDeviceID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDeviceBelongsToUserId", ctx, userID, userDeviceID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserDeviceBelongsToUserId indicates an expected call of UserDeviceBelongsToUserId.
func (mr *MockDeviceAPIServiceMockRecorder) UserDeviceBelongsToUserId(ctx, userID, userDeviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDeviceBelongsToUserId", reflect.TypeOf((*MockDeviceAPIService)(nil).UserDeviceBelongsToUserId), ctx, userID, userDeviceID)
}
