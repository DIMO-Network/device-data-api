// Code generated by MockGen. DO NOT EDIT.
// Source: vehicle_signals_event_batch_service.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"
	time "time"

	"go.uber.org/mock/gomock"
)

// MockVehicleSignalsEventBatchService is a mock of VehicleSignalsEventBatchService interface.
type MockVehicleSignalsEventBatchService struct {
	ctrl     *gomock.Controller
	recorder *MockVehicleSignalsEventBatchServiceMockRecorder
}

// MockVehicleSignalsEventBatchServiceMockRecorder is the mock recorder for MockVehicleSignalsEventBatchService.
type MockVehicleSignalsEventBatchServiceMockRecorder struct {
	mock *MockVehicleSignalsEventBatchService
}

// NewMockVehicleSignalsEventBatchService creates a new mock instance.
func NewMockVehicleSignalsEventBatchService(ctrl *gomock.Controller) *MockVehicleSignalsEventBatchService {
	mock := &MockVehicleSignalsEventBatchService{ctrl: ctrl}
	mock.recorder = &MockVehicleSignalsEventBatchServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVehicleSignalsEventBatchService) EXPECT() *MockVehicleSignalsEventBatchServiceMockRecorder {
	return m.recorder
}

// GenerateVehicleDataTracking mocks base method.
func (m *MockVehicleSignalsEventBatchService) GenerateVehicleDataTracking(ctx context.Context, dateKey string, fromTime time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateVehicleDataTracking", ctx, dateKey, fromTime)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateVehicleDataTracking indicates an expected call of GenerateVehicleDataTracking.
func (mr *MockVehicleSignalsEventBatchServiceMockRecorder) GenerateVehicleDataTracking(ctx, dateKey, fromTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateVehicleDataTracking", reflect.TypeOf((*MockVehicleSignalsEventBatchService)(nil).GenerateVehicleDataTracking), ctx, dateKey, fromTime)
}
