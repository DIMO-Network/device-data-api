// Code generated by MockGen. DO NOT EDIT.
// Source: vehicle_signals_event_summary_service.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	"go.uber.org/mock/gomock"
)

// MockVehicleSignalsEventSummaryService is a mock of VehicleSignalsEventSummaryService interface.
type MockVehicleSignalsEventSummaryService struct {
	ctrl     *gomock.Controller
	recorder *MockVehicleSignalsEventSummaryServiceMockRecorder
}

// MockVehicleSignalsEventSummaryServiceMockRecorder is the mock recorder for MockVehicleSignalsEventSummaryService.
type MockVehicleSignalsEventSummaryServiceMockRecorder struct {
	mock *MockVehicleSignalsEventSummaryService
}

// NewMockVehicleSignalsEventSummaryService creates a new mock instance.
func NewMockVehicleSignalsEventSummaryService(ctrl *gomock.Controller) *MockVehicleSignalsEventSummaryService {
	mock := &MockVehicleSignalsEventSummaryService{ctrl: ctrl}
	mock.recorder = &MockVehicleSignalsEventSummaryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVehicleSignalsEventSummaryService) EXPECT() *MockVehicleSignalsEventSummaryServiceMockRecorder {
	return m.recorder
}

// GenerateData mocks base method.
func (m *MockVehicleSignalsEventSummaryService) GenerateData(ctx context.Context, dateKey, integrationID, powerTrainType string, deviceDefinitionCount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateData", ctx, dateKey, integrationID, powerTrainType, deviceDefinitionCount)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateData indicates an expected call of GenerateData.
func (mr *MockVehicleSignalsEventSummaryServiceMockRecorder) GenerateData(ctx, dateKey, integrationID, powerTrainType, deviceDefinitionCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateData", reflect.TypeOf((*MockVehicleSignalsEventSummaryService)(nil).GenerateData), ctx, dateKey, integrationID, powerTrainType, deviceDefinitionCount)
}
