// Code generated by MockGen. DO NOT EDIT.
// Source: device_definitions_service.go
//
// Generated by this command:
//
//	mockgen -source device_definitions_service.go -destination mocks/device_definitions_service_mock.go
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	grpc "github.com/DIMO-Network/device-definitions-api/pkg/grpc"
	gomock "go.uber.org/mock/gomock"
)

// MockDeviceDefinitionsAPIService is a mock of DeviceDefinitionsAPIService interface.
type MockDeviceDefinitionsAPIService struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceDefinitionsAPIServiceMockRecorder
}

// MockDeviceDefinitionsAPIServiceMockRecorder is the mock recorder for MockDeviceDefinitionsAPIService.
type MockDeviceDefinitionsAPIServiceMockRecorder struct {
	mock *MockDeviceDefinitionsAPIService
}

// NewMockDeviceDefinitionsAPIService creates a new mock instance.
func NewMockDeviceDefinitionsAPIService(ctrl *gomock.Controller) *MockDeviceDefinitionsAPIService {
	mock := &MockDeviceDefinitionsAPIService{ctrl: ctrl}
	mock.recorder = &MockDeviceDefinitionsAPIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceDefinitionsAPIService) EXPECT() *MockDeviceDefinitionsAPIServiceMockRecorder {
	return m.recorder
}

// GetDeviceDefinitionBySlug mocks base method.
func (m *MockDeviceDefinitionsAPIService) GetDeviceDefinitionBySlug(ctx context.Context, id string) (*grpc.GetDeviceDefinitionItemResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceDefinitionBySlug", ctx, id)
	ret0, _ := ret[0].(*grpc.GetDeviceDefinitionItemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceDefinitionBySlug indicates an expected call of GetDeviceDefinitionBySlug.
func (mr *MockDeviceDefinitionsAPIServiceMockRecorder) GetDeviceDefinitionBySlug(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceDefinitionBySlug", reflect.TypeOf((*MockDeviceDefinitionsAPIService)(nil).GetDeviceDefinitionBySlug), ctx, id)
}

// GetDeviceDefinitionsByIDs mocks base method.
func (m *MockDeviceDefinitionsAPIService) GetDeviceDefinitionsByIDs(ctx context.Context, ids []string) ([]*grpc.GetDeviceDefinitionItemResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceDefinitionsByIDs", ctx, ids)
	ret0, _ := ret[0].([]*grpc.GetDeviceDefinitionItemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceDefinitionsByIDs indicates an expected call of GetDeviceDefinitionsByIDs.
func (mr *MockDeviceDefinitionsAPIServiceMockRecorder) GetDeviceDefinitionsByIDs(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceDefinitionsByIDs", reflect.TypeOf((*MockDeviceDefinitionsAPIService)(nil).GetDeviceDefinitionsByIDs), ctx, ids)
}

// GetIntegrations mocks base method.
func (m *MockDeviceDefinitionsAPIService) GetIntegrations(ctx context.Context) ([]*grpc.Integration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIntegrations", ctx)
	ret0, _ := ret[0].([]*grpc.Integration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIntegrations indicates an expected call of GetIntegrations.
func (mr *MockDeviceDefinitionsAPIServiceMockRecorder) GetIntegrations(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntegrations", reflect.TypeOf((*MockDeviceDefinitionsAPIService)(nil).GetIntegrations), ctx)
}
