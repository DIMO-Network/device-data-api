// Code generated by MockGen. DO NOT EDIT.
// Source: vehicle_signal_job_service.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	models "github.com/DIMO-Network/device-data-api/internal/models"
	"go.uber.org/mock/gomock"
)

// MockVehicleSignalJobService is a mock of VehicleSignalJobService interface.
type MockVehicleSignalJobService struct {
	ctrl     *gomock.Controller
	recorder *MockVehicleSignalJobServiceMockRecorder
}

// MockVehicleSignalJobServiceMockRecorder is the mock recorder for MockVehicleSignalJobService.
type MockVehicleSignalJobServiceMockRecorder struct {
	mock *MockVehicleSignalJobService
}

// NewMockVehicleSignalJobService creates a new mock instance.
func NewMockVehicleSignalJobService(ctrl *gomock.Controller) *MockVehicleSignalJobService {
	mock := &MockVehicleSignalJobService{ctrl: ctrl}
	mock.recorder = &MockVehicleSignalJobServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVehicleSignalJobService) EXPECT() *MockVehicleSignalJobServiceMockRecorder {
	return m.recorder
}

// GetJobContext mocks base method.
func (m *MockVehicleSignalJobService) GetJobContext(ctx context.Context) (*models.SignalJobContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobContext", ctx)
	ret0, _ := ret[0].(*models.SignalJobContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobContext indicates an expected call of GetJobContext.
func (mr *MockVehicleSignalJobServiceMockRecorder) GetJobContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobContext", reflect.TypeOf((*MockVehicleSignalJobService)(nil).GetJobContext), ctx)
}
