// Code generated by MockGen. DO NOT EDIT.
// Source: device_status_service.go
//
// Generated by this command:
//
//	mockgen -source device_status_service.go -destination mocks/device_status_service_mock.go
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	response "github.com/DIMO-Network/device-data-api/internal/response"
	models "github.com/DIMO-Network/device-data-api/models"
	privileges "github.com/DIMO-Network/shared/privileges"
	gomock "go.uber.org/mock/gomock"
)

// MockDeviceStatusService is a mock of DeviceStatusService interface.
type MockDeviceStatusService struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceStatusServiceMockRecorder
}

// MockDeviceStatusServiceMockRecorder is the mock recorder for MockDeviceStatusService.
type MockDeviceStatusServiceMockRecorder struct {
	mock *MockDeviceStatusService
}

// NewMockDeviceStatusService creates a new mock instance.
func NewMockDeviceStatusService(ctrl *gomock.Controller) *MockDeviceStatusService {
	mock := &MockDeviceStatusService{ctrl: ctrl}
	mock.recorder = &MockDeviceStatusServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceStatusService) EXPECT() *MockDeviceStatusServiceMockRecorder {
	return m.recorder
}

// PrepareDeviceStatusInformation mocks base method.
func (m *MockDeviceStatusService) PrepareDeviceStatusInformation(ctx context.Context, deviceData models.UserDeviceDatumSlice, deviceDefinitionID string, deviceStyleID *string, privilegeIDs []privileges.Privilege) response.DeviceSnapshot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareDeviceStatusInformation", ctx, deviceData, deviceDefinitionID, deviceStyleID, privilegeIDs)
	ret0, _ := ret[0].(response.DeviceSnapshot)
	return ret0
}

// PrepareDeviceStatusInformation indicates an expected call of PrepareDeviceStatusInformation.
func (mr *MockDeviceStatusServiceMockRecorder) PrepareDeviceStatusInformation(ctx, deviceData, deviceDefinitionID, deviceStyleID, privilegeIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareDeviceStatusInformation", reflect.TypeOf((*MockDeviceStatusService)(nil).PrepareDeviceStatusInformation), ctx, deviceData, deviceDefinitionID, deviceStyleID, privilegeIDs)
}
