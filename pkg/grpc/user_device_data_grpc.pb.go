// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: pkg/grpc/user_device_data.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserDeviceDataServiceClient is the client API for UserDeviceDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserDeviceDataServiceClient interface {
	GetUserDeviceData(ctx context.Context, in *UserDeviceDataRequest, opts ...grpc.CallOption) (*UserDeviceDataResponse, error)
	// todo do we have a seperate proto for reports vs user data?
	GetSignals(ctx context.Context, in *SignalRequest, opts ...grpc.CallOption) (*SignalResponse, error)
	GetAvailableDates(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DateIdsResponse, error)
	GetSummaryConnected(ctx context.Context, in *SummaryConnectedRequest, opts ...grpc.CallOption) (*SummaryConnectedResponse, error)
	GetSecondLevelSignals(ctx context.Context, in *SignalRequest, opts ...grpc.CallOption) (*SecondLevelSignalsResponse, error)
}

type userDeviceDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserDeviceDataServiceClient(cc grpc.ClientConnInterface) UserDeviceDataServiceClient {
	return &userDeviceDataServiceClient{cc}
}

func (c *userDeviceDataServiceClient) GetUserDeviceData(ctx context.Context, in *UserDeviceDataRequest, opts ...grpc.CallOption) (*UserDeviceDataResponse, error) {
	out := new(UserDeviceDataResponse)
	err := c.cc.Invoke(ctx, "/grpc.UserDeviceDataService/GetUserDeviceData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDeviceDataServiceClient) GetSignals(ctx context.Context, in *SignalRequest, opts ...grpc.CallOption) (*SignalResponse, error) {
	out := new(SignalResponse)
	err := c.cc.Invoke(ctx, "/grpc.UserDeviceDataService/GetSignals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDeviceDataServiceClient) GetAvailableDates(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DateIdsResponse, error) {
	out := new(DateIdsResponse)
	err := c.cc.Invoke(ctx, "/grpc.UserDeviceDataService/GetAvailableDates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDeviceDataServiceClient) GetSummaryConnected(ctx context.Context, in *SummaryConnectedRequest, opts ...grpc.CallOption) (*SummaryConnectedResponse, error) {
	out := new(SummaryConnectedResponse)
	err := c.cc.Invoke(ctx, "/grpc.UserDeviceDataService/GetSummaryConnected", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDeviceDataServiceClient) GetSecondLevelSignals(ctx context.Context, in *SignalRequest, opts ...grpc.CallOption) (*SecondLevelSignalsResponse, error) {
	out := new(SecondLevelSignalsResponse)
	err := c.cc.Invoke(ctx, "/grpc.UserDeviceDataService/GetSecondLevelSignals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserDeviceDataServiceServer is the server API for UserDeviceDataService service.
// All implementations must embed UnimplementedUserDeviceDataServiceServer
// for forward compatibility
type UserDeviceDataServiceServer interface {
	GetUserDeviceData(context.Context, *UserDeviceDataRequest) (*UserDeviceDataResponse, error)
	// todo do we have a seperate proto for reports vs user data?
	GetSignals(context.Context, *SignalRequest) (*SignalResponse, error)
	GetAvailableDates(context.Context, *emptypb.Empty) (*DateIdsResponse, error)
	GetSummaryConnected(context.Context, *SummaryConnectedRequest) (*SummaryConnectedResponse, error)
	GetSecondLevelSignals(context.Context, *SignalRequest) (*SecondLevelSignalsResponse, error)
	mustEmbedUnimplementedUserDeviceDataServiceServer()
}

// UnimplementedUserDeviceDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserDeviceDataServiceServer struct {
}

func (UnimplementedUserDeviceDataServiceServer) GetUserDeviceData(context.Context, *UserDeviceDataRequest) (*UserDeviceDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDeviceData not implemented")
}
func (UnimplementedUserDeviceDataServiceServer) GetSignals(context.Context, *SignalRequest) (*SignalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSignals not implemented")
}
func (UnimplementedUserDeviceDataServiceServer) GetAvailableDates(context.Context, *emptypb.Empty) (*DateIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableDates not implemented")
}
func (UnimplementedUserDeviceDataServiceServer) GetSummaryConnected(context.Context, *SummaryConnectedRequest) (*SummaryConnectedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSummaryConnected not implemented")
}
func (UnimplementedUserDeviceDataServiceServer) GetSecondLevelSignals(context.Context, *SignalRequest) (*SecondLevelSignalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecondLevelSignals not implemented")
}
func (UnimplementedUserDeviceDataServiceServer) mustEmbedUnimplementedUserDeviceDataServiceServer() {}

// UnsafeUserDeviceDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserDeviceDataServiceServer will
// result in compilation errors.
type UnsafeUserDeviceDataServiceServer interface {
	mustEmbedUnimplementedUserDeviceDataServiceServer()
}

func RegisterUserDeviceDataServiceServer(s grpc.ServiceRegistrar, srv UserDeviceDataServiceServer) {
	s.RegisterService(&UserDeviceDataService_ServiceDesc, srv)
}

func _UserDeviceDataService_GetUserDeviceData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDeviceDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeviceDataServiceServer).GetUserDeviceData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.UserDeviceDataService/GetUserDeviceData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeviceDataServiceServer).GetUserDeviceData(ctx, req.(*UserDeviceDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDeviceDataService_GetSignals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeviceDataServiceServer).GetSignals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.UserDeviceDataService/GetSignals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeviceDataServiceServer).GetSignals(ctx, req.(*SignalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDeviceDataService_GetAvailableDates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeviceDataServiceServer).GetAvailableDates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.UserDeviceDataService/GetAvailableDates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeviceDataServiceServer).GetAvailableDates(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDeviceDataService_GetSummaryConnected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SummaryConnectedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeviceDataServiceServer).GetSummaryConnected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.UserDeviceDataService/GetSummaryConnected",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeviceDataServiceServer).GetSummaryConnected(ctx, req.(*SummaryConnectedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDeviceDataService_GetSecondLevelSignals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeviceDataServiceServer).GetSecondLevelSignals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.UserDeviceDataService/GetSecondLevelSignals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeviceDataServiceServer).GetSecondLevelSignals(ctx, req.(*SignalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserDeviceDataService_ServiceDesc is the grpc.ServiceDesc for UserDeviceDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserDeviceDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.UserDeviceDataService",
	HandlerType: (*UserDeviceDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserDeviceData",
			Handler:    _UserDeviceDataService_GetUserDeviceData_Handler,
		},
		{
			MethodName: "GetSignals",
			Handler:    _UserDeviceDataService_GetSignals_Handler,
		},
		{
			MethodName: "GetAvailableDates",
			Handler:    _UserDeviceDataService_GetAvailableDates_Handler,
		},
		{
			MethodName: "GetSummaryConnected",
			Handler:    _UserDeviceDataService_GetSummaryConnected_Handler,
		},
		{
			MethodName: "GetSecondLevelSignals",
			Handler:    _UserDeviceDataService_GetSecondLevelSignals_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/grpc/user_device_data.proto",
}
